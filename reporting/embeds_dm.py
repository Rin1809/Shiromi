# --- START OF FILE reporting/embeds_dm.py ---
import discord
from discord.ext import commands
import datetime
import logging
from typing import Dict, Any, Optional, Union, Tuple, List, Set, Callable
from collections import Counter, defaultdict
import collections
import config
import utils 

log = logging.getLogger(__name__)




# --- Constants cho vi·ªác t·∫°o Embed (N·∫øu c√≥, ƒë·∫∑t ·ªü ƒë√¢y) ---
TOP_PERSONAL_ITEMS_LIMIT = 3
PERSONAL_GOLDEN_HOUR_INTERVAL = 3
PERSONAL_CHANNEL_CHART_LIMIT = 3

# --- Embed Creation Functions ---

async def create_personal_activity_embed(
    member: discord.Member,
    scan_data: Dict[str, Any],
    bot: commands.Bot,
    ranking_data: Dict[str, Dict[int, int]] # Ranking data ƒë∆∞·ª£c truy·ªÅn v√†o
) -> Optional[discord.Embed]:
    """T·∫°o Embed ch√≠nh hi·ªÉn th·ªã ho·∫°t ƒë·ªông c√° nh√¢n c·ªßa user."""
    e = lambda name: utils.get_emoji(name, bot)
    user_id = member.id
    user_activity_data = scan_data.get("user_activity", {}).get(user_id)
    guild = member.guild

    if not user_activity_data:
        return None

    embed = discord.Embed(
        title=f"{e('user_activity')} Ho·∫°t ƒë·ªông c·ªßa B·∫°n tr√™n {member.guild.name}",
        color=member.color if member.color.value != 0 else discord.Color.blue()
    )
    if member.display_avatar:
        embed.set_thumbnail(url=member.display_avatar.url)

    # --- Tin nh·∫Øn & N·ªôi dung ---
    msg_count = user_activity_data.get('message_count', 0)
    msg_rank = ranking_data.get('messages', {}).get(user_id)
    msg_rank_str = f"(H·∫°ng: **#{msg_rank}**)" if msg_rank else ""
    link_count = user_activity_data.get('link_count', 0)
    img_count = user_activity_data.get('image_count', 0)
    # L·∫•y t·ªïng emoji custom t·ª´ scan_data (ƒë∆∞·ª£c t√≠nh ·ªü data_processing)
    custom_emoji_total_count = scan_data.get("user_total_custom_emoji_content_counts", {}).get(user_id, 0)
    sticker_count = user_activity_data.get('sticker_count', 0)
    other_file_count = user_activity_data.get('other_file_count', 0)

    content_lines = [
        f"{e('stats')} T·ªïng tin nh·∫Øn: **{msg_count:,}** {msg_rank_str}".strip(),
        f"{e('link')} Links ƒë√£ g·ª≠i: {link_count:,}",
        f"{e('image')} ·∫¢nh ƒë√£ g·ª≠i: {img_count:,}",
        f"{utils.get_emoji('mention', bot)} Emoji Server (N·ªôi dung): {custom_emoji_total_count:,}", # S·ª≠ d·ª•ng bi·∫øn ƒë√£ l·∫•y
        f"{e('sticker')} Stickers ƒë√£ g·ª≠i: {sticker_count:,}",
        f"üìé Files kh√°c: {other_file_count:,}"
    ]
    embed.add_field(name="üìú Tin Nh·∫Øn & N·ªôi Dung", value="\n".join(content_lines), inline=False)

    # --- T∆∞∆°ng t√°c ---
    reply_count = user_activity_data.get('reply_count', 0)
    mention_given = user_activity_data.get('mention_given_count', 0)
    mention_received = user_activity_data.get('mention_received_count', 0)
    # L·∫•y reaction counts t·ª´ user_activity (ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong scan_channels)
    reaction_received = user_activity_data.get('reaction_received_count', 0)
    reaction_given = user_activity_data.get('reaction_given_count', 0)

    react_lines = []
    # Ki·ªÉm tra xem config c√≥ b·∫≠t reaction scan kh√¥ng TR∆Ø·ªöC KHI hi·ªÉn th·ªã
    if scan_data.get("can_scan_reactions", False): # L·∫•y c·ªù t·ª´ scan_data
        react_lines.append(f"{e('reaction')} Reactions nh·∫≠n (l·ªçc): {reaction_received:,}")
        react_lines.append(f"{e('reaction')} Reactions ƒë√£ th·∫£ (l·ªçc): {reaction_given:,}")

    interaction_lines = [
        f"{e('reply')} Tr·∫£ l·ªùi ƒë√£ g·ª≠i: {reply_count:,}",
        f"{e('mention')} Mentions ƒë√£ g·ª≠i: {mention_given:,}",
        f"{e('mention')} Mentions nh·∫≠n: {mention_received:,}",
        *react_lines # Th√™m d√≤ng reactions n·∫øu c√≥
    ]
    # Lo·∫°i b·ªè c√°c d√≤ng tr·ªëng n·∫øu reaction scan t·∫Øt
    interaction_lines_filtered = [line for line in interaction_lines if line.strip()]
    embed.add_field(name="üí¨ T∆∞∆°ng T√°c", value="\n".join(interaction_lines_filtered), inline=False)


    # --- Th·ªùi gian ho·∫°t ƒë·ªông ---
    first_seen = user_activity_data.get('first_seen')
    last_seen = user_activity_data.get('last_seen')
    activity_span_secs = user_activity_data.get('activity_span_seconds', 0)
    activity_span_str = utils.format_timedelta(datetime.timedelta(seconds=activity_span_secs)) if activity_span_secs > 0 else "N/A"

    time_lines = [
        f"{e('calendar')} Hƒê ƒë·∫ßu ti√™n: {utils.format_discord_time(first_seen, 'R') if first_seen else 'N/A'}",
        f"{e('calendar')} Hƒê cu·ªëi c√πng: {utils.format_discord_time(last_seen, 'R') if last_seen else 'N/A'}",
        f"{e('clock')} Kho·∫£ng TG ho·∫°t ƒë·ªông: **{activity_span_str}**"
    ]
    embed.add_field(name="‚è≥ Th·ªùi Gian Ho·∫°t ƒê·ªông", value="\n".join(time_lines), inline=False)

    # --- Ph·∫°m vi ho·∫°t ƒë·ªông (K√®m Bi·ªÉu ƒê·ªì) ---
    distinct_channels_count = len(user_activity_data.get('channels_messaged_in', set()))
    user_channel_msg_counts: Optional[Dict[int, int]] = scan_data.get('user_channel_message_counts', {}).get(user_id)

    scope_lines = [f"üó∫Ô∏è S·ªë k√™nh/lu·ªìng kh√°c nhau ƒë√£ nh·∫Øn: **{distinct_channels_count}**"]
    bar_chart_str = ""

    if user_channel_msg_counts:
        sorted_channels = sorted(user_channel_msg_counts.items(), key=lambda item: item[1], reverse=True)
        if sorted_channels:
            data_for_chart = sorted_channels[:PERSONAL_CHANNEL_CHART_LIMIT]

            async def format_location_key(location_id):
                channel_obj = guild.get_channel_or_thread(location_id)
                if channel_obj:
                    channel_type_emoji = utils.get_channel_type_emoji(channel_obj, bot)
                    name = utils.escape_markdown(channel_obj.name)
                    max_len = 15
                    name_display = (name[:max_len] + '‚Ä¶') if len(name) > max_len else name
                    return f"{channel_type_emoji} {name_display}"
                return f"ID:{location_id}"

            bar_chart_str = await utils.create_vertical_text_bar_chart(
                sorted_data=data_for_chart,
                key_formatter=format_location_key,
                top_n=PERSONAL_CHANNEL_CHART_LIMIT,
                max_chart_height=5, bar_width=1, bar_spacing=1,
                chart_title=f"Top {PERSONAL_CHANNEL_CHART_LIMIT} K√™nh/Lu·ªìng",
                show_legend=True
            )
            if bar_chart_str:
                scope_lines.insert(1, bar_chart_str)
                scope_lines.insert(2, "")
        else:
             scope_lines.append("üìç Top K√™nh/Lu·ªìng Ho·∫°t ƒê·ªông: *Ch∆∞a c√≥ d·ªØ li·ªáu*")
    else:
        scope_lines.append("üìç Top K√™nh/Lu·ªìng Ho·∫°t ƒê·ªông: *Ch∆∞a c√≥ d·ªØ li·ªáu*")

    scope_field_value = "\n".join(scope_lines)
    if len(scope_field_value) > 1024:
        scope_field_value = scope_field_value[:1020] + "\n[...]"
    embed.add_field(name="üéØ Ph·∫°m Vi Ho·∫°t ƒê·ªông", value=scope_field_value, inline=False)

    # --- Top Items C√° Nh√¢n ---
    top_items_lines = []
    # Top Emoji
    user_custom_emoji_counts: Counter = scan_data.get("user_custom_emoji_content_counts", defaultdict(Counter)).get(user_id, Counter())
    if user_custom_emoji_counts:
        sorted_emojis = user_custom_emoji_counts.most_common(TOP_PERSONAL_ITEMS_LIMIT)
        emoji_cache: Dict[int, discord.Emoji] = scan_data.get("server_emojis_cache", {})
        emoji_strs = []
        for emoji_id, count in sorted_emojis:
            emoji_obj = emoji_cache.get(emoji_id) or bot.get_emoji(emoji_id)
            if emoji_obj:
                emoji_strs.append(f"{str(emoji_obj)} ({count:,})")
            else:
                emoji_strs.append(f"`ID:{emoji_id}` ({count:,})")
        if emoji_strs:
            top_items_lines.append(f"{e('mention')} **Top Emoji Server:** " + " ".join(emoji_strs))

    # Top Sticker
    user_sticker_counts: Counter = scan_data.get("user_sticker_id_counts", defaultdict(Counter)).get(user_id, Counter())
    if user_sticker_counts:
        sorted_stickers = user_sticker_counts.most_common(TOP_PERSONAL_ITEMS_LIMIT)
        sticker_ids_to_fetch = [int(sid) for sid, count in sorted_stickers if sid.isdigit()]
        sticker_name_cache: Dict[int, str] = {}
        if sticker_ids_to_fetch:
            sticker_name_cache = await utils._fetch_sticker_dict(sticker_ids_to_fetch, bot)
        sticker_strs = []
        for sticker_id_str, count in sorted_stickers:
            if sticker_id_str.isdigit():
                sticker_id = int(sticker_id_str)
                sticker_name = sticker_name_cache.get(sticker_id, "...")
                sticker_strs.append(f"'{utils.escape_markdown(sticker_name)}' ({count:,})")
            else:
                sticker_strs.append(f"`ID:{sticker_id_str}` ({count:,})")
        if sticker_strs:
            top_items_lines.append(f"{e('sticker')} **Top Stickers:** " + ", ".join(sticker_strs))

    if top_items_lines:
        embed.add_field(
            name=f"‚≠ê Top Items C√° Nh√¢n ({TOP_PERSONAL_ITEMS_LIMIT})",
            value="\n".join(top_items_lines),
            inline=False
        )

    # --- Gi·ªù V√†ng C√° Nh√¢n ---
    user_hourly_counter: Counter = scan_data.get("user_hourly_activity", defaultdict(Counter)).get(user_id)
    if user_hourly_counter:
        hourly_grouped = defaultdict(int)
        for hour, count in user_hourly_counter.items():
             if isinstance(hour, int) and 0 <= hour <= 23: # Th√™m ki·ªÉm tra hour h·ª£p l·ªá
                start_hour = (hour // PERSONAL_GOLDEN_HOUR_INTERVAL) * PERSONAL_GOLDEN_HOUR_INTERVAL
                hourly_grouped[start_hour] += count
             else:
                log.warning(f"B·ªè qua d·ªØ li·ªáu gi·ªù kh√¥ng h·ª£p l·ªá cho user {user_id}: hour={hour}")

        if hourly_grouped:
            timezone_str = "UTC"
            local_offset_hours = utils.get_local_timezone_offset()
            if local_offset_hours is not None: # Ki·ªÉm tra None
                timezone_str = f"UTC{local_offset_hours:+d}"

            try: # Th√™m try-except cho ph·∫ßn t√≠nh to√°n gi·ªù
                best_start_hour, max_count = max(hourly_grouped.items(), key=lambda item: item[1])
                utc_start_dt = datetime.datetime.now(datetime.timezone.utc).replace(hour=best_start_hour, minute=0, second=0, microsecond=0)
                local_tz = datetime.timezone(datetime.timedelta(hours=local_offset_hours)) if local_offset_hours is not None else datetime.timezone.utc
                local_start_dt = utc_start_dt.astimezone(local_tz)
                local_end_dt = local_start_dt + datetime.timedelta(hours=PERSONAL_GOLDEN_HOUR_INTERVAL)
                time_str = f"{local_start_dt.strftime('%H:%M')} - {local_end_dt.strftime('%H:%M')}"
                golden_hour_line = f"Khung gi·ªù s√¥i n·ªïi nh·∫•t ({timezone_str}): **{time_str}** ({max_count:,} tin)"
                embed.add_field(name="‚òÄÔ∏èüåô Gi·ªù V√†ng C√° Nh√¢n", value=golden_hour_line, inline=False)
            except ValueError as ve: # B·∫Øt l·ªói ValueError n·∫øu gi·ªù kh√¥ng h·ª£p l·ªá
                log.warning(f"L·ªói gi√° tr·ªã gi·ªù khi t√≠nh gi·ªù v√†ng c√° nh√¢n cho {user_id} (gi·ªù={best_start_hour}): {ve}")
                embed.add_field(name="‚òÄÔ∏èüåô Gi·ªù V√†ng C√° Nh√¢n", value="*Kh√¥ng th·ªÉ x√°c ƒë·ªãnh (l·ªói gi·ªù)*", inline=False)
            except Exception as gh_err:
                log.warning(f"L·ªói t√≠nh gi·ªù v√†ng c√° nh√¢n cho {user_id}: {gh_err}")
                embed.add_field(name="‚òÄÔ∏èüåô Gi·ªù V√†ng C√° Nh√¢n", value="*Kh√¥ng th·ªÉ x√°c ƒë·ªãnh*", inline=False)
        else:
             embed.add_field(name="‚òÄÔ∏èüåô Gi·ªù V√†ng C√° Nh√¢n", value="*Ch∆∞a c√≥ d·ªØ li·ªáu*", inline=False)
    else:
         embed.add_field(name="‚òÄÔ∏èüåô Gi·ªù V√†ng C√° Nh√¢n", value="*Ch∆∞a c√≥ d·ªØ li·ªáu*", inline=False)


    scan_end_time = scan_data.get("scan_end_time", datetime.datetime.now(datetime.timezone.utc))
    embed.set_footer(text=f"D·ªØ li·ªáu qu√©t t·ª´ {utils.format_discord_time(scan_end_time)}")
    return embed


async def create_achievements_embed(
    member: discord.Member,
    scan_data: Dict[str, Any],
    bot: commands.Bot,
    ranking_data: Dict[str, Dict[int, int]] # Ranking data ƒë∆∞·ª£c truy·ªÅn v√†o
) -> Optional[discord.Embed]:
    """T·∫°o Embed hi·ªÉn th·ªã th√†nh t√≠ch v√† so s√°nh v·ªã tr√≠ c·ªßa user."""
    e = lambda name: utils.get_emoji(name, bot)
    user_id = member.id
    has_achievements = False

    embed = discord.Embed(
        title=f"{e('award')} Th√†nh T√≠ch & V·ªã Tr√≠ C·ªßa B·∫°n",
        description="*So s√°nh ho·∫°t ƒë·ªông c·ªßa b·∫°n v·ªõi to√†n server. Ch·ªâ hi·ªÉn th·ªã n·∫øu b·∫°n l·ªçt v√†o top.*",
        color=member.color if member.color.value != 0 else discord.Color.gold()
    )

    def add_rank_line(lines_list: list, display_name: str, rank_key: str):
        """Th√™m d√≤ng x·∫øp h·∫°ng v√†o danh s√°ch n·∫øu user c√≥ rank."""
        nonlocal has_achievements
        rank = ranking_data.get(rank_key, {}).get(user_id)
        if rank:
            lines_list.append(f"- {display_name}: **H·∫°ng #{rank}**")
            has_achievements = True

    # --- BXH Ho·∫°t ƒê·ªông & T∆∞∆°ng T√°c ---
    activity_ranks: List[str] = []
    add_rank_line(activity_ranks, "G·ª≠i Tin Nh·∫Øn", "messages")
    add_rank_line(activity_ranks, "Nh·∫≠n Reaction (l·ªçc)", "reaction_received")
    # Ch·ªâ th√™m d√≤ng rank reaction_given n·∫øu scan b·∫≠t
    if scan_data.get("can_scan_reactions", False):
        add_rank_line(activity_ranks, "Th·∫£ Reaction (l·ªçc)", "reaction_given")
    add_rank_line(activity_ranks, "Tr·∫£ L·ªùi Tin Nh·∫Øn", "replies")
    add_rank_line(activity_ranks, "ƒê∆∞·ª£c Nh·∫Øc T√™n", "mention_received")
    add_rank_line(activity_ranks, "Hay Nh·∫Øc T√™n", "mention_given")
    add_rank_line(activity_ranks, '"Ng∆∞·ªùi ƒêa NƒÉng" (Nhi·ªÅu k√™nh)', "distinct_channels")
    if activity_ranks:
        embed.add_field(
            name=f"{e('stats')} BXH Ho·∫°t ƒê·ªông & T∆∞∆°ng T√°c",
            value="\n".join(activity_ranks),
            inline=False
        )

    # --- BXH S√°ng T·∫°o N·ªôi Dung ---
    content_ranks: List[str] = []
    add_rank_line(content_ranks, "D√πng Custom Emoji (Content)", "custom_emoji_content")
    add_rank_line(content_ranks, "G·ª≠i Sticker", "stickers_sent")
    add_rank_line(content_ranks, "G·ª≠i Link", "links_sent")
    add_rank_line(content_ranks, "G·ª≠i ·∫¢nh", "images_sent")
    add_rank_line(content_ranks, "T·∫°o Thread", "threads_created")
    if content_ranks:
        embed.add_field(
            name=f"{e('image')} BXH S√°ng T·∫°o N·ªôi Dung",
            value="\n".join(content_ranks),
            inline=False
        )

    # --- Danh Hi·ªáu ƒê·∫∑c Bi·ªát ---
    tracked_role_grants: Counter = scan_data.get("tracked_role_grant_counts", Counter())
    special_role_lines: List[str] = []
    guild = member.guild
    # L·∫•y TRACKED_ROLE_GRANT_IDS t·ª´ config (import config ·ªü ƒë·∫ßu file n√†y)
    tracked_role_ids_from_config = getattr(config, 'TRACKED_ROLE_GRANT_IDS', set())
    for tracked_role_id in tracked_role_ids_from_config:
        grant_count = tracked_role_grants.get((user_id, tracked_role_id), 0)
        if grant_count > 0:
            role = guild.get_role(tracked_role_id)
            role_mention = role.mention if role else f"`ID: {tracked_role_id}`"
            rank_key = f"tracked_role_{tracked_role_id}"
            rank = ranking_data.get(rank_key, {}).get(user_id)
            rank_str = f"(H·∫°ng #{rank})" if rank else ""
            line = f'- ƒê√£ nh·∫≠n {role_mention}: **{grant_count}** l·∫ßn {rank_str}'.strip()
            special_role_lines.append(line)
            has_achievements = True
    if special_role_lines:
        embed.add_field(
            name=f"{e('crown')} Danh Hi·ªáu ƒê·∫∑c Bi·ªát",
            value="\n".join(special_role_lines),
            inline=False
        )

    # --- BXH Th·ªùi Gian & Tham Gia ---
    time_ranks: List[str] = []
    add_rank_line(time_ranks, "Th√†nh vi√™n L√¢u NƒÉm", "oldest_members")
    add_rank_line(time_ranks, "Ho·∫°t ƒê·ªông L√¢u Nh·∫•t (Span)", "activity_span")
    if member.premium_since:
        add_rank_line(time_ranks, "Booster B·ªÅn B·ªâ", "booster_duration")
    if time_ranks:
        embed.add_field(
            name=f"{e('calendar')} BXH Th·ªùi Gian & Tham Gia",
            value="\n".join(time_ranks),
            inline=False
        )

    # --- Kh√¥ng c√≥ th√†nh t√≠ch ---
    if not has_achievements:
        embed.description = "*B·∫°n ch∆∞a c√≥ th√†nh t√≠ch n√†o n·ªïi b·∫≠t l·ªçt v√†o top trong l·∫ßn qu√©t n√†y. H√£y ti·∫øp t·ª•c ho·∫°t ƒë·ªông nh√©!*"
        embed.clear_fields() # X√≥a c√°c field n·∫øu kh√¥ng c√≥ g√¨ ƒë·ªÉ hi·ªÉn th·ªã

    return embed

# --- END OF FILE reporting/embeds_dm.py ---