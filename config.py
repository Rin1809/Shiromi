# --- START OF FILE config.py ---
import os
import sys
import logging
from dotenv import load_dotenv
import discord
from typing import List, Optional, Set, Tuple, Dict # Th√™m Dict
import json # Th√™m import json

log = logging.getLogger(__name__)

# --- T·∫£i bi·∫øn m√¥i tr∆∞·ªùng ---
load_dotenv()

# --- Helper Function ---
def _parse_id_list(env_var_name: str) -> Set[int]:
    """Ph√¢n t√≠ch chu·ªói ID c√°ch nhau b·ªüi d·∫•u ph·∫©y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng th√†nh set c√°c integer."""
    id_str = os.getenv(env_var_name)
    if not id_str:
        return set()
    try:
        return {int(item.strip()) for item in id_str.split(',') if item.strip().isdigit()}
    except ValueError:
        log.error(f"L·ªói ph√¢n t√≠ch danh s√°ch ID trong bi·∫øn m√¥i tr∆∞·ªùng '{env_var_name}'. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng (ch·ªâ ch·ª©a s·ªë, c√°ch nhau b·ªüi d·∫•u ph·∫©y).")
        return set()

def _parse_unicode_list(env_var_name: str) -> Set[str]:
    """Ph√¢n t√≠ch chu·ªói unicode emojis c√°ch nhau b·ªüi d·∫•u ph·∫©y."""
    emoji_str = os.getenv(env_var_name)
    if not emoji_str:
        return set()
    return {item.strip() for item in emoji_str.split(',') if item.strip()}

def _parse_id(env_var_name: str) -> Optional[int]:
    """Ph√¢n t√≠ch m·ªôt ID ƒë∆°n t·ª´ bi·∫øn m√¥i tr∆∞·ªùng."""
    id_str = os.getenv(env_var_name)
    if id_str and id_str.isdigit():
        return int(id_str)
    elif id_str:
        log.warning(f"Gi√° tr·ªã kh√¥ng h·ª£p l·ªá cho ID trong bi·∫øn m√¥i tr∆∞·ªùng '{env_var_name}'. Ph·∫£i l√† m·ªôt s·ªë.")
    return None

# --- H√†m ƒë·ªçc mapping ·∫£nh qu√Ω t·ªôc ---
QUY_TOC_ANH_FILE = "quy_toc_anh.json" # T√™n file c·∫•u h√¨nh

def _load_quy_toc_anh_mapping() -> Dict[str, str]:
    """ƒê·ªçc file JSON ch·ª©a mapping User ID sang URL ·∫£nh."""
    mapping: Dict[str, str] = {}
    if not os.path.exists(QUY_TOC_ANH_FILE):
        log.warning(f"File ·∫£nh qu√Ω t·ªôc '{QUY_TOC_ANH_FILE}' kh√¥ng t·ªìn t·∫°i. S·∫Ω kh√¥ng c√≥ ·∫£nh c√° nh√¢n.")
        return mapping

    try:
        with open(QUY_TOC_ANH_FILE, 'r', encoding='utf-8') as f:
            mapping = json.load(f)
        if not isinstance(mapping, dict):
            log.error(f"File '{QUY_TOC_ANH_FILE}' kh√¥ng ch·ª©a JSON object h·ª£p l·ªá. Ph·∫£i l√† d·∫°ng {{'user_id': 'url', ...}}")
            return {}
        # Validate keys l√† s·ªë
        valid_mapping = {}
        for key, value in mapping.items():
            if key.isdigit() and isinstance(value, str):
                valid_mapping[key] = value
            else:
                log.warning(f"B·ªè qua c·∫∑p key-value kh√¥ng h·ª£p l·ªá trong '{QUY_TOC_ANH_FILE}': key='{key}', value='{value}' (Key ph·∫£i l√† ID d·∫°ng string, Value ph·∫£i l√† URL string)")
        log.info(f"ƒê√£ t·∫£i {len(valid_mapping)} mapping ·∫£nh qu√Ω t·ªôc t·ª´ '{QUY_TOC_ANH_FILE}'.")
        return valid_mapping
    except json.JSONDecodeError:
        log.error(f"L·ªói gi·∫£i m√£ JSON trong file '{QUY_TOC_ANH_FILE}'. Vui l√≤ng ki·ªÉm tra c√∫ ph√°p.")
        return {}
    except Exception as e:
        log.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc file '{QUY_TOC_ANH_FILE}': {e}", exc_info=True)
        return {}
# --- K·∫øt th√∫c h√†m ƒë·ªçc ---


# --- L·∫•y c√°c gi√° tr·ªã c·∫•u h√¨nh ---
BOT_TOKEN = os.getenv("DISCORD_TOKEN", "YOUR_BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
ADMIN_USER_ID_STR = os.getenv("ADMIN_USER_ID")
ADMIN_USER_ID = int(ADMIN_USER_ID_STR) if ADMIN_USER_ID_STR and ADMIN_USER_ID_STR.isdigit() else None
COMMAND_PREFIX = os.getenv("COMMAND_PREFIX", "!")
MIN_MESSAGE_COUNT_FOR_REPORT = int(os.getenv("MIN_MESSAGE_COUNT_FOR_REPORT", 100))
FINAL_STICKER_ID_STR = os.getenv("FINAL_STICKER_ID")
FINAL_STICKER_ID = int(FINAL_STICKER_ID_STR) if FINAL_STICKER_ID_STR and FINAL_STICKER_ID_STR.isdigit() else None
BOT_NAME = os.getenv("BOT_NAME", "Shiromi")
ENABLE_REACTION_SCAN = os.getenv("ENABLE_REACTION_SCAN", "False").lower() == "true"

# --- Deep Scan Enhancement Configs ---
TRACKED_ROLE_GRANT_IDS: Set[int] = _parse_id_list("TRACKED_ROLE_GRANT_IDS")
log.info(f"IDs Role Grant ƒë∆∞·ª£c theo d√µi: {TRACKED_ROLE_GRANT_IDS if TRACKED_ROLE_GRANT_IDS else 'Kh√¥ng c√≥'}")

DM_REPORT_RECIPIENT_ROLE_ID_STR = os.getenv("DM_REPORT_RECIPIENT_ROLE_ID")
DM_REPORT_RECIPIENT_ROLE_ID: Optional[int] = None
if DM_REPORT_RECIPIENT_ROLE_ID_STR and DM_REPORT_RECIPIENT_ROLE_ID_STR.isdigit():
    DM_REPORT_RECIPIENT_ROLE_ID = int(DM_REPORT_RECIPIENT_ROLE_ID_STR)
    log.info(f"ID Role nh·∫≠n DM b√°o c√°o: {DM_REPORT_RECIPIENT_ROLE_ID}")
else:
    log.info("Kh√¥ng c·∫•u h√¨nh Role nh·∫≠n DM b√°o c√°o.")

BOOSTER_THANKYOU_ROLE_IDS: Set[int] = _parse_id_list("BOOSTER_THANKYOU_ROLE_IDS")
log.info(f"IDs Role ƒë∆∞·ª£c c·∫£m ∆°n trong DM: {BOOSTER_THANKYOU_ROLE_IDS if BOOSTER_THANKYOU_ROLE_IDS else 'Kh√¥ng c√≥'}")

REACTION_UNICODE_EXCEPTIONS: Set[str] = _parse_unicode_list("REACTION_UNICODE_EXCEPTIONS")
log.info(f"Unicode Reactions ƒë∆∞·ª£c ph√©p trong BXH: {REACTION_UNICODE_EXCEPTIONS if REACTION_UNICODE_EXCEPTIONS else 'Kh√¥ng c√≥ (ch·ªâ custom emoji server)'}")

ADMIN_ROLE_IDS_FILTER: Set[int] = _parse_id_list("ADMIN_ROLE_IDS_FILTER")
log.info(f"IDs Role Admin b·ªï sung c·∫ßn l·ªçc kh·ªèi BXH: {ADMIN_ROLE_IDS_FILTER if ADMIN_ROLE_IDS_FILTER else 'Kh√¥ng c√≥'}")

# --- T·∫£i mapping ·∫£nh qu√Ω t·ªôc ---
QUY_TOC_ANH_MAPPING: Dict[str, str] = _load_quy_toc_anh_mapping()
# -----------------------------

# --- C·∫•u h√¨nh K√™nh B√°o c√°o v√† Sticker/Emoji ---
REPORT_CHANNEL_ID: Optional[int] = _parse_id("REPORT_CHANNEL_ID")
log.info(f"ID K√™nh g·ª≠i b√°o c√°o: {REPORT_CHANNEL_ID}" if REPORT_CHANNEL_ID else "G·ª≠i b√°o c√°o v√†o k√™nh g·ªëc.")
INTERMEDIATE_STICKER_ID: Optional[int] = _parse_id("INTERMEDIATE_STICKER_ID") # Sticker A
log.info(f"ID Sticker trung gian (A): {INTERMEDIATE_STICKER_ID}" if INTERMEDIATE_STICKER_ID else "Kh√¥ng c√≥ sticker trung gian (A).")
LEAST_STICKER_ID: Optional[int] = _parse_id("LEAST_STICKER_ID") # Sticker B
log.info(f"ID Sticker '√çt Nh·∫•t' (B): {LEAST_STICKER_ID}" if LEAST_STICKER_ID else "Kh√¥ng c√≥ sticker '√≠t nh·∫•t' (B).")
MOST_STICKER_ID: Optional[int] = _parse_id("MOST_STICKER_ID") # Sticker C
log.info(f"ID Sticker 'Nhi·ªÅu Nh·∫•t' (C): {MOST_STICKER_ID}" if MOST_STICKER_ID else "Kh√¥ng c√≥ sticker 'nhi·ªÅu nh·∫•t' (C).")
# <<< THAY TH·∫æ D√íNG STICKER CU·ªêI DM >>>
FINAL_DM_EMOJI: str = os.getenv("FINAL_DM_EMOJI", "üéâ") # Emoji cu·ªëi DM, m·∫∑c ƒë·ªãnh l√† üéâ
log.info(f"Emoji cu·ªëi DM: {FINAL_DM_EMOJI}")
# -----------------------------------------

# --- C·∫•u h√¨nh Audit Log Actions ---
AUDIT_LOG_ACTIONS_TO_TRACK_STR = os.getenv("AUDIT_LOG_ACTIONS_TO_TRACK")
AUDIT_LOG_ACTIONS_TO_TRACK = None
if AUDIT_LOG_ACTIONS_TO_TRACK is None:
    AUDIT_LOG_ACTIONS_TO_TRACK = [
        discord.AuditLogAction.kick, discord.AuditLogAction.ban, discord.AuditLogAction.unban,
        discord.AuditLogAction.member_role_update, discord.AuditLogAction.member_update,
        discord.AuditLogAction.message_delete,
        discord.AuditLogAction.thread_create,
        discord.AuditLogAction.member_move, discord.AuditLogAction.member_disconnect,
    ]
log.info(f"Audit log actions ƒë∆∞·ª£c theo d√µi: {[a.name for a in AUDIT_LOG_ACTIONS_TO_TRACK]}")


# --- Ki·ªÉm tra c·∫•u h√¨nh quan tr·ªçng ---
def check_critical_config():
    """Ki·ªÉm tra c√°c c·∫•u h√¨nh b·∫Øt bu·ªôc v√† tho√°t n·∫øu thi·∫øu."""
    critical_missing = []
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN":
        critical_missing.append("DISCORD_TOKEN")
    if not DATABASE_URL:
        critical_missing.append("DATABASE_URL")
    if not ADMIN_USER_ID:
         critical_missing.append("ADMIN_USER_ID")

    if critical_missing:
        print("[L·ªñI C·∫§U H√åNH NGHI√äM TR·ªåNG] Thi·∫øu c√°c bi·∫øn m√¥i tr∆∞·ªùng sau:")
        for missing in critical_missing:
            print(f"- {missing}")
        sys.exit(1)

# --- END OF FILE config.py ---