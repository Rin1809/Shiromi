# --- START OF FILE cogs/deep_scan_helpers/finalization.py ---
import discord
from discord.ext import commands
import logging
import time
import datetime
from typing import Dict, Any, List, Optional

import config
import utils

log = logging.getLogger(__name__)

async def finalize_scan(scan_data: Dict[str, Any]):
    """G·ª≠i tin nh·∫Øn trung gian sau khi qu√©t log v√† d·ªçn d·∫πp."""
    ctx: commands.Context = scan_data["ctx"]
    bot: commands.Bot = scan_data["bot"]
    server: discord.Guild = scan_data["server"]
    e = lambda name: utils.get_emoji(name, bot)
    scan_errors: List[str] = scan_data["scan_errors"]
    scan_id: Optional[int] = scan_data.get("scan_id") 

    log.info(f"{e('loading')} ƒêang ho√†n t·∫•t qu√©t log v√† chu·∫©n b·ªã g·ª≠i b√°o c√°o...")

    # X√≥a tin nh·∫Øn tr·∫°ng th√°i ban ƒë·∫ßu/cu·ªëi c√πng n·∫øu c√≤n
    initial_status_msg = scan_data.get("initial_status_msg")
    status_message = scan_data.get("status_message")
    msg_to_delete = status_message or initial_status_msg
    if msg_to_delete:
        try: await msg_to_delete.delete()
        except (discord.NotFound, discord.HTTPException) as del_err: log.debug(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn tr·∫°ng th√°i ({msg_to_delete.id}): {del_err}")
        except Exception as del_e: log.warning(f"L·ªói l·∫° khi x√≥a tin nh·∫Øn tr·∫°ng th√°i ({msg_to_delete.id}): {del_e}")

    # --- X√°c ƒë·ªãnh k√™nh b√°o c√°o v√† link website ---
    report_channel_mention = "k√™nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"
    report_channel_obj: Optional[discord.TextChannel] = None
    if config.REPORT_CHANNEL_ID:
        ch = server.get_channel(config.REPORT_CHANNEL_ID)
        if isinstance(ch, discord.TextChannel): report_channel_obj = ch; report_channel_mention = ch.mention
        elif ch: report_channel_mention = f"ID {config.REPORT_CHANNEL_ID} (kh√¥ng ph·∫£i k√™nh text)"
        else: report_channel_mention = f"ID {config.REPORT_CHANNEL_ID} (kh√¥ng t√¨m th·∫•y)"
    elif isinstance(ctx.channel, discord.TextChannel): report_channel_obj = ctx.channel; report_channel_mention = ctx.channel.mention

    # T·∫°o link website
    website_link = "Link tra c·ª©u kh√¥ng kh·∫£ d·ª•ng."
    if config.WEBSITE_BASE_URL and config.WEBSITE_BASE_URL != "http://localhost:3000":
        # ∆Øu ti√™n link ch·ªâ c√≥ guild ID ƒë·ªÉ web t·ª± l·∫•y scan m·ªõi nh·∫•t
        website_link = f"{config.WEBSITE_BASE_URL}/scan/{server.id}"
    else:
        log.warning("WEBSITE_BASE_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng, link tra c·ª©u s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

    # --- G·ª≠i tin nh·∫Øn trung gian v√†o k√™nh G·ªêC (A) ---
    intermediate_message_lines = [
        f"# L√† {config.BOT_NAME} ƒë√¢y <:a_eneuroAYAYA:1367434562245890048> !! \n",
        "## ‚ÑπÔ∏è ƒê√£ thu th·∫≠p xong log !!",
        "## üìÑ ƒê√£ vi·∫øt xong b√°o c√°o !! \n\n",
        f"üîç Tra c·ª©u k·∫øt qu·∫£ c·ªßa m·∫•y b·∫°n kh√°c t·∫°i: \n\n"
        f"## [B·∫•m v√¥ ƒë√¢y: H√¥m qua ·ìö·òè·ó¢ | „Åç„ÅÆ„ÅÜ]({website_link}) \n\n", # <<< TH√äM LINK WEB
        f"üëâ Gh√© qua {report_channel_mention} ƒë·ªÉ xem b√°o c√°o t·ªïng h·ª£p c·ªßa Server trong 1 nƒÉm qua tr√™n Discord nhe!"
    ]
    intermediate_message = "\n".join(intermediate_message_lines)
    intermediate_sticker = await utils.fetch_sticker_object(config.INTERMEDIATE_STICKER_ID, bot, server)
    kwargs_intermediate: Dict[str, Any] = {
        "content": intermediate_message,
        "allowed_mentions": discord.AllowedMentions.none(),
        # NgƒÉn Discord t·ª± t·∫°o preview cho link web n·∫øu kh√¥ng mu·ªën
        "suppress_embeds": True
    }
    if intermediate_sticker: kwargs_intermediate["stickers"] = [intermediate_sticker]
    try:
        await ctx.send(**kwargs_intermediate)
        log.info(f"ƒê√£ g·ª≠i tin nh·∫Øn ho√†n t·∫•t qu√©t log v√†o k√™nh g·ªëc #{ctx.channel.name}.")
    except discord.HTTPException as send_err: log.error(f"L·ªói g·ª≠i tin nh·∫Øn trung gian v√†o k√™nh g·ªëc #{ctx.channel.name}: {send_err.status} {send_err.text}")
    except Exception as send_err: log.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh g·ª≠i tin nh·∫Øn trung gian v√†o k√™nh g·ªëc: {send_err}")
    # ------------------------------------------------------------

    # --- Log k·∫øt th√∫c qu√©t ---
    end_time_cmd = time.monotonic()
    start_time_cmd: float = scan_data.get("start_time_cmd", end_time_cmd)
    total_cmd_duration_secs = end_time_cmd - start_time_cmd
    scan_data["overall_duration"] = datetime.timedelta(seconds=total_cmd_duration_secs)

    log.info(f"\n--- [bold green]{e('success')} Ho√†n t·∫•t x·ª≠ l√Ω sau qu√©t cho {scan_data['server'].name} (Scan ID: {scan_id})[/bold green] ---")
    log.info(f"{e('clock')} Th·ªùi gian t·ªïng l·ªánh: [bold magenta]{utils.format_timedelta(scan_data['overall_duration'], high_precision=True)}[/]")
    if scan_errors: log.warning(f"{e('warning')} Qu√©t ho√†n th√†nh v·ªõi [yellow]{len(scan_errors)}[/] l·ªói/c·∫£nh b√°o.")
    else: log.info(f"{e('success')} Qu√©t ho√†n th√†nh kh√¥ng c√≥ l·ªói/c·∫£nh b√°o ƒë√°ng k·ªÉ.")

# --- END OF FILE cogs/deep_scan_helpers/finalization.py ---