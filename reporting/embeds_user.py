# --- START OF FILE reporting/embeds_user.py ---
import discord
import datetime
import math
import logging
import collections
import asyncio
import time
from typing import List, Dict, Any, Optional, Union, Tuple, Set
from discord.ext import commands
from collections import Counter, defaultdict
import unicodedata # <<< TH√äM IMPORT N√ÄY ·ªû ƒê·∫¶U FILE

# Relative import
# S·ª≠ d·ª•ng import tuy·ªát ƒë·ªëi
import utils
import config

log = logging.getLogger(__name__)

# --- Constants ---
# Gi·ªØ nguy√™n ho·∫∑c ƒëi·ªÅu ch·ªânh LIMIT n·∫øu c·∫ßn cho layout m·ªõi
TOP_ACTIVE_USERS_LIMIT = 15
TOP_OLDEST_MEMBERS_LIMIT = 10 # Gi·ªØ gi·ªõi h·∫°n th·∫•p h∆°n cho embed n√†y v√¨ nhi·ªÅu chi ti·∫øt
TOP_LINK_USERS_LIMIT = 15
TOP_IMAGE_USERS_LIMIT = 15
TOP_EMOJI_USERS_LIMIT = 15
TOP_STICKER_USERS_LIMIT = 15
TOP_MENTIONED_USERS_LIMIT = 15
TOP_MENTIONING_USERS_LIMIT = 15
TOP_REPLIERS_LIMIT = 15
TOP_REACTION_RECEIVED_USERS_LIMIT = 15
TOP_REACTION_GIVERS_LIMIT = 15 # Gi·ªØ nguy√™n LIMIT m·ªõi
TOP_ACTIVITY_SPAN_USERS_LIMIT = 15
TOP_THREAD_CREATORS_LIMIT = 15
TOP_DISTINCT_CHANNEL_USERS_LIMIT = 10 # Gi·∫£m v√¨ embed n√†y c≈©ng nhi·ªÅu chi ti·∫øt

# Th√™m LIMIT cho BXH "√çt Nh·∫•t" (c√≥ th·ªÉ d√πng chung ho·∫∑c ri√™ng)
LEAST_ACTIVE_USERS_LIMIT = 10
LEAST_LINK_USERS_LIMIT = 10
LEAST_IMAGE_USERS_LIMIT = 10
LEAST_EMOJI_USERS_LIMIT = 10
LEAST_STICKER_USERS_LIMIT = 10
LEAST_MENTIONED_USERS_LIMIT = 10
LEAST_MENTIONING_USERS_LIMIT = 10
LEAST_REPLIERS_LIMIT = 10
LEAST_REACTION_RECEIVED_USERS_LIMIT = 10
LEAST_REACTION_GIVERS_LIMIT = 10
LEAST_ACTIVITY_SPAN_USERS_LIMIT = 10
LEAST_THREAD_CREATORS_LIMIT = 10
LEAST_DISTINCT_CHANNEL_USERS_LIMIT = 10


# --- H√ÄM HELPER T·∫†O D√íNG USER CHO C√ÇY ---
# (H√†m n√†y c√≥ th·ªÉ d√πng chung cho nhi·ªÅu embed)
async def _format_user_tree_line(
    rank: int,
    user_id: int,
    main_value: Any, # Gi√° tr·ªã ch√≠nh (s·ªë tin nh·∫Øn, link, string date, string span, etc.)
    main_unit_singular: str, # ƒê∆°n v·ªã s·ªë √≠t
    main_unit_plural: str, # ƒê∆°n v·ªã s·ªë nhi·ªÅu
    guild: discord.Guild,
    user_cache: Dict[int, Optional[Union[discord.Member, discord.User]]],
    secondary_info: Optional[str] = None, # Th√¥ng tin ph·ª• (vd: Top Emoji)
    tertiary_info: Optional[str] = None # Th√¥ng tin ph·ª• kh√°c (vd: Last Seen)
) -> List[str]:
    """T·∫°o c√°c d√≤ng cho m·ªôt user trong c√¢y leaderboard."""
    lines = []
    podium_emojis = ["ü•á", "ü•à", "ü•â"] # Podium v·∫´n gi·ªØ cho top list
    # S·ª≠ d·ª•ng rank number cho list "√≠t nh·∫•t" ho·∫∑c rank > 3
    rank_prefix = f"`#{rank:02d}`" # M·∫∑c ƒë·ªãnh d√πng rank number

    user_obj = user_cache.get(user_id)
    user_mention = user_obj.mention if user_obj else f"`{user_id}`"
    user_display_name = f" ({utils.escape_markdown(user_obj.display_name)})" if user_obj else " (Unknown/Left)"

    lines.append(f"{rank_prefix} {user_mention}{user_display_name}")

    # D√≤ng th√¥ng tin ch√≠nh
    if isinstance(main_value, (int, float)):
        main_value_formatted = f"{main_value:,}"
        # Logic ƒë∆°n v·ªã c·∫ßn xem x√©t k·ªπ h∆°n cho list "√≠t nh·∫•t"
        # N·∫øu gi√° tr·ªã l√† 1, d√πng s·ªë √≠t, c√≤n l·∫°i d√πng s·ªë nhi·ªÅu (gi·ªØ nguy√™n)
        main_unit = main_unit_plural if main_value != 1 else main_unit_singular
    else:
        main_value_formatted = str(main_value)
        main_unit = main_unit_plural # M·∫∑c ƒë·ªãnh d√πng s·ªë nhi·ªÅu cho string

    # B·ªè ƒë∆°n v·ªã n·∫øu gi√° tr·ªã ƒë√£ l√† string ƒë∆∞·ª£c format ƒë·∫πp
    if isinstance(main_value, str) and ("ng√†y" in main_value or "gi·ªù" in main_value or "ph√∫t" in main_value or "gi√¢y" in main_value or "/" in main_value or ":" in main_value):
        lines.append(f"  `‚îî` **{main_value_formatted}**") # B·ªè ƒë∆°n v·ªã
    else:
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p gi√° tr·ªã ch√≠nh l√† 0 (cho BXH √≠t nh·∫•t)
        if isinstance(main_value, (int, float)) and main_value == 0:
             lines.append(f"  `‚îî` **{main_value_formatted}** {main_unit}")
        # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh√°c (bao g·ªìm s·ªë > 0 v√† string kh√¥ng ph·∫£i th·ªùi gian)
        elif main_value_formatted: # Ch·ªâ th√™m d√≤ng n·∫øu gi√° tr·ªã kh√¥ng r·ªóng
             lines.append(f"  `‚îî` **{main_value_formatted}** {main_unit}")
        # B·ªè qua n·∫øu gi√° tr·ªã r·ªóng (kh√¥ng n√™n x·∫£y ra nh∆∞ng ƒë·ªÅ ph√≤ng)


    # D√≤ng th√¥ng tin ph·ª• (n·∫øu c√≥)
    if secondary_info:
        lines.append(f"  `‚îî` {secondary_info}")

    # D√≤ng th√¥ng tin ph·ª• th·ª© 3 (n·∫øu c√≥)
    if tertiary_info:
        lines.append(f"  `‚îî` {tertiary_info}")

    # Th√™m d√≤ng tr·ªëng ngƒÉn c√°ch
    lines.append("")

    return lines

# --- H√ÄM HELPER CHUNG CHO T·∫†O BXH USER ---
# --- H√ÄM HELPER CHUNG CHO T·∫†O BXH USER ---
async def _create_user_leaderboard_embed(
    title: str,
    counts: Optional[Union[collections.Counter, Dict[int, Any]]],
    value_key: Optional[str], # Key ƒë·ªÉ l·∫•y gi√° tr·ªã t·ª´ dict (n·∫øu counts l√† dict)
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot],
    limit: int,
    item_name_singular: str,
    item_name_plural: str,
    e: callable, # H√†m lambda l·∫•y emoji
    color: discord.Color,
    filter_admins: bool,
    sort_ascending: bool = False, # Th√™m c·ªù s·∫Øp x·∫øp tƒÉng d·∫ßn
    secondary_info_getter: Optional[callable] = None, # H√†m l·∫•y th√¥ng tin ph·ª•
    tertiary_info_getter: Optional[callable] = None, # Th√™m getter th·ª© 3
    minimum_value: Optional[Union[int, float]] = None # Th√™m minimum_value
) -> Optional[discord.Embed]:
    """H√†m helper chung ƒë·ªÉ t·∫°o embed leaderboard d·∫°ng c√¢y cho user."""

    if not counts:
        log.debug(f"B·ªè qua t·∫°o embed '{title}': Kh√¥ng c√≥ d·ªØ li·ªáu counts.")
        return None

    # --- Chu·∫©n b·ªã d·ªØ li·ªáu v√† l·ªçc ---
    processed_counts = collections.Counter()
    # Ch·ªâ x·ª≠ l√Ω Counter ho·∫∑c Dict v·ªõi value_key
    if isinstance(counts, collections.Counter):
        # L·ªçc gi√° tr·ªã t·ªëi thi·ªÉu n·∫øu c√≥
        if minimum_value is not None:
            processed_counts = collections.Counter({
                uid: count for uid, count in counts.items()
                if isinstance(count, (int, float)) and count >= minimum_value
            })
        else:
            processed_counts = counts.copy() # Ch·ªâ copy n·∫øu kh√¥ng l·ªçc min
    elif isinstance(counts, dict) and value_key:
         processed_counts = collections.Counter({
             uid: data.get(value_key, 0)
             for uid, data in counts.items()
             if not data.get('is_bot', False) # L·ªçc bot ·ªü ƒë√¢y
                and isinstance(data.get(value_key), (int, float))
                and (minimum_value is None or data.get(value_key, 0) >= minimum_value) # L·ªçc min
         })
    else:
        log.warning(f"D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá cho embed '{title}'.")
        return None

    if not processed_counts:
        log.debug(f"B·ªè qua t·∫°o embed '{title}': Kh√¥ng c√≥ d·ªØ li·ªáu sau khi x·ª≠ l√Ω/l·ªçc bot/gi√° tr·ªã min.")
        return None

    admin_ids_to_filter: Optional[Set[int]] = None
    if filter_admins:
        admin_ids_to_filter = {m.id for m in guild.members if m.guild_permissions.administrator}
        admin_ids_to_filter.update(config.ADMIN_ROLE_IDS_FILTER)
        if config.ADMIN_USER_ID: admin_ids_to_filter.add(config.ADMIN_USER_ID)

    # L·ªçc admin v√† s·∫Øp x·∫øp
    filtered_users = [
        (uid, count) for uid, count in processed_counts.items()
        if (not filter_admins or not isinstance(uid, int) or uid not in admin_ids_to_filter)
           # Kh√¥ng c·∫ßn ki·ªÉm tra bot n·ªØa v√¨ ƒë√£ l·ªçc ·ªü tr√™n
    ]

    # S·∫Øp x·∫øp d·ª±a tr√™n c·ªù sort_ascending
    filtered_sorted_users = sorted(filtered_users, key=lambda item: item[1], reverse=not sort_ascending)

    if not filtered_sorted_users:
        log.debug(f"B·ªè qua t·∫°o embed '{title}': Kh√¥ng c√≥ user h·ª£p l·ªá sau khi l·ªçc.")
        return None

    # --- T·∫°o Embed ---
    total_users_in_lb = len(filtered_sorted_users)
    users_to_display = filtered_sorted_users[:limit]
    user_ids_to_fetch = [uid for uid, count in users_to_display if isinstance(uid, int)]
    user_cache = await utils._fetch_user_dict(guild, user_ids_to_fetch, bot)

    title_emoji = e('award') if e('award') != '‚ùì' and not sort_ascending else 'üìâ' # Emoji kh√°c cho list "√≠t nh·∫•t"
    embed = discord.Embed(title=f"{title_emoji} {title}", color=color)
    desc_prefix = "*ƒê√£ l·ªçc bot."
    if filter_admins: desc_prefix += " ƒê√£ l·ªçc admin*"
    if minimum_value is not None: desc_prefix += f" Ch·ªâ t√≠nh user c√≥ >= {minimum_value} {item_name_plural}."
    description_lines = [desc_prefix, ""]

    for rank, (user_id, count_val) in enumerate(users_to_display, 1):
        # --- S·ª¨A L·ªñI AWAIT ---
        secondary_info = None
        if secondary_info_getter:
            try:
                # Lu√¥n await n·∫øu getter ƒë∆∞·ª£c cung c·∫•p (gi·∫£ ƒë·ªãnh n√≥ l√† async)
                secondary_info = await secondary_info_getter(user_id, counts)
            except Exception as e_sec:
                log.warning(f"L·ªói khi g·ªçi secondary_info_getter cho user {user_id} trong '{title}': {e_sec}")
                secondary_info = None

        tertiary_info_final = None
        if tertiary_info_getter:
            try:
                # X·ª≠ l√Ω t∆∞∆°ng t·ª± cho tertiary_info_getter
                if asyncio.iscoroutinefunction(tertiary_info_getter):
                    tertiary_info_final = await tertiary_info_getter(user_id, counts)
                elif callable(tertiary_info_getter): # N·∫øu l√† h√†m th∆∞·ªùng ho·∫∑c lambda
                     tertiary_info_final = tertiary_info_getter(user_id, counts)
                # B·ªè qua n·∫øu kh√¥ng ph·∫£i callable
            except Exception as e_tert:
                log.warning(f"L·ªói khi g·ªçi tertiary_info_getter cho user {user_id} trong '{title}': {e_tert}")
                tertiary_info_final = None
        # --- K·∫æT TH√öC S·ª¨A L·ªñI AWAIT ---

        lines = await _format_user_tree_line(
            rank, user_id, count_val, item_name_singular, item_name_plural,
            guild, user_cache, secondary_info=secondary_info, tertiary_info=tertiary_info_final
        )
        description_lines.extend(lines)

    if description_lines and description_lines[-1] == "": description_lines.pop()
    embed.description = "\n".join(description_lines)
    if len(embed.description) > 4096: embed.description = embed.description[:4090] + "\n[...]"
    if total_users_in_lb > limit: embed.set_footer(text=f"... v√† {total_users_in_lb - limit} ng∆∞·ªùi d√πng kh√°c.")

    return embed


# --- C√ÅC H√ÄM T·∫†O EMBED "NHI·ªÄU NH·∫§T" (D√ôNG HELPER M·ªöI) ---

async def create_top_active_users_embed(
    user_activity: Dict[int, Dict[str, Any]],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    # H√†m l·∫•y th√¥ng tin ph·ª•: Last Seen
    async def get_last_seen(user_id, data_source):
        user_act_data = data_source.get(user_id)
        if user_act_data:
            last_seen = user_act_data.get('last_seen')
            return f"‚Ä¢ L·∫ßn cu·ªëi Hƒê: {utils.format_discord_time(last_seen, 'R')}" if last_seen else None
        return None

    return await _create_user_leaderboard_embed(
        title=f"{e('stats')} BXH User G·ª≠i Tin Nh·∫Øn Nhi·ªÅu Nh·∫•t",
        counts=user_activity,
        value_key='message_count', # L·∫•y gi√° tr·ªã t·ª´ 'message_count' trong dict user_activity
        guild=guild,
        bot=bot,
        limit=TOP_ACTIVE_USERS_LIMIT,
        item_name_singular="tin nh·∫Øn",
        item_name_plural="tin nh·∫Øn",
        e=e,
        color=discord.Color.orange(),
        filter_admins=True,
        secondary_info_getter=get_last_seen,
        minimum_value=1 # C·∫ßn √≠t nh·∫•t 1 tin
    )

async def create_top_link_posters_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('link')} BXH User G·ª≠i Nhi·ªÅu Link Nh·∫•t",
        counts=counts,
        value_key=None, # Counter kh√¥ng c·∫ßn value_key
        guild=guild,
        bot=bot,
        limit=TOP_LINK_USERS_LIMIT,
        item_name_singular="link",
        item_name_plural="links",
        e=e,
        color=discord.Color.dark_blue(),
        filter_admins=True,
        minimum_value=1
    )

async def create_top_image_posters_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('image')} BXH User G·ª≠i ·∫¢nh Nhi·ªÅu Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_IMAGE_USERS_LIMIT,
        item_name_singular="·∫£nh",
        item_name_plural="·∫£nh",
        e=e,
        color=discord.Color.dark_green(),
        filter_admins=True,
        minimum_value=1
    )

async def create_top_custom_emoji_users_embed(
    scan_data: Dict[str, Any],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    user_detailed_counts: Dict[int, Counter] = scan_data.get("user_custom_emoji_content_counts", {})
    user_total_counts = collections.Counter({
        uid: sum(ecounts.values())
        for uid, ecounts in user_detailed_counts.items()
        if sum(ecounts.values()) > 0
    })
    emoji_cache: Dict[int, discord.Emoji] = scan_data.get("server_emojis_cache", {})

    async def get_top_emoji(user_id, data_source):
        user_specific_counts = data_source.get(user_id, Counter())
        if user_specific_counts:
            try:
                most_used_id, top_count = user_specific_counts.most_common(1)[0]
                emoji_obj = emoji_cache.get(most_used_id) or bot.get_emoji(most_used_id)
                if emoji_obj: return f"‚Ä¢ Top: {str(emoji_obj)} ({top_count:,})"
                else: return f"‚Ä¢ Top ID: `{most_used_id}` ({top_count:,})"
            except (ValueError, IndexError): pass
        return None

    return await _create_user_leaderboard_embed(
        title=f"{e('mention')} BXH User D√πng Emoji C·ªßa Server Nhi·ªÅu Nh·∫•t",
        counts=user_total_counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_EMOJI_USERS_LIMIT,
        item_name_singular="emoji",
        item_name_plural="emojis",
        e=e,
        color=discord.Color.dark_gold(),
        filter_admins=True,
        secondary_info_getter=lambda uid, _: get_top_emoji(uid, user_detailed_counts), # Truy·ªÅn dict chi ti·∫øt
        minimum_value=1
    )

async def create_top_sticker_users_embed(
    scan_data: Dict[str, Any],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    user_detailed_counts: Dict[int, Counter] = scan_data.get("user_sticker_id_counts", {})
    user_total_counts: Counter = scan_data.get("user_sticker_counts", Counter())
    sticker_ids_to_fetch_names = set()
    # L·∫•y sticker ID t·ª´ t·∫•t c·∫£ user trong counter ƒë·ªÉ fetch t√™n 1 l·∫ßn
    for user_id, _ in user_total_counts.items(): # Ch·ªâ l·∫•y top N ƒë·ªÉ fetch?
         user_specific_counts = user_detailed_counts.get(user_id, Counter())
         if user_specific_counts:
             try:
                 # Ch·ªâ l·∫•y top 1 sticker c·ªßa user ƒë·ªÉ fetch t√™n
                 if user_specific_counts:
                     most_used_id_str, _ = user_specific_counts.most_common(1)[0]
                     if most_used_id_str.isdigit(): sticker_ids_to_fetch_names.add(int(most_used_id_str))
             except (ValueError, IndexError): pass
    sticker_name_cache: Dict[int, str] = {}
    if sticker_ids_to_fetch_names:
        sticker_name_cache = await utils._fetch_sticker_dict(list(sticker_ids_to_fetch_names), bot)

    async def get_top_sticker(user_id, data_source):
        user_specific_counts_display = data_source.get(user_id, Counter())
        if user_specific_counts_display:
            try:
                most_used_id_str_display, top_count = user_specific_counts_display.most_common(1)[0]
                if most_used_id_str_display.isdigit():
                    sticker_id = int(most_used_id_str_display)
                    sticker_name = sticker_name_cache.get(sticker_id, "...")
                    return f"‚Ä¢ Top: '{utils.escape_markdown(sticker_name)}' ({top_count:,})"
                else:
                    return f"‚Ä¢ Top ID: `{most_used_id_str_display}` ({top_count:,})"
            except (ValueError, IndexError): pass
        return None

    return await _create_user_leaderboard_embed(
        title=f"{e('sticker')} BXH User G·ª≠i Sticker Nhi·ªÅu Nh·∫•t",
        counts=user_total_counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_STICKER_USERS_LIMIT,
        item_name_singular="sticker",
        item_name_plural="stickers",
        e=e,
        color=discord.Color.dark_purple(),
        filter_admins=True,
        secondary_info_getter=lambda uid, _: get_top_sticker(uid, user_detailed_counts),
        minimum_value=1
    )

async def create_top_mentioned_users_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('mention')} BXH User ƒê∆∞·ª£c Nh·∫Øc T√™n Nhi·ªÅu Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_MENTIONED_USERS_LIMIT,
        item_name_singular="l·∫ßn",
        item_name_plural="l·∫ßn",
        e=e,
        color=discord.Color.purple(),
        filter_admins=False, # Kh√¥ng l·ªçc admin
        minimum_value=1
    )

async def create_top_mentioning_users_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('mention')} Top User Hay Nh·∫Øc T√™n Ng∆∞·ªùi Kh√°c Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_MENTIONING_USERS_LIMIT,
        item_name_singular="l·∫ßn nh·∫Øc",
        item_name_plural="l·∫ßn nh·∫Øc",
        e=e,
        color=discord.Color.dark_purple(),
        filter_admins=True,
        minimum_value=1
    )

async def create_top_repliers_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('reply')} BXH User Hay Tr·∫£ L·ªùi Tin Nh·∫Øn Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_REPLIERS_LIMIT,
        item_name_singular="l·∫ßn tr·∫£ l·ªùi",
        item_name_plural="l·∫ßn tr·∫£ l·ªùi",
        e=e,
        color=discord.Color.blue(),
        filter_admins=True,
        minimum_value=1
    )

async def create_top_reaction_received_users_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot],
    user_emoji_received_counts: Optional[defaultdict] = None,
    scan_data: Optional[Dict[str, Any]] = None
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    emoji_cache: Dict[int, discord.Emoji] = {}
    if scan_data:
        emoji_cache = scan_data.get("server_emojis_cache", {})

    async def get_top_received_emoji(user_id, _): # Tham s·ªë th·ª© 2 kh√¥ng d√πng
        if user_emoji_received_counts:
            user_specific_counts = user_emoji_received_counts.get(user_id, Counter())
            if user_specific_counts:
                try:
                    most_received_key, top_count = user_specific_counts.most_common(1)[0]
                    if isinstance(most_received_key, int):
                        emoji_obj = emoji_cache.get(most_received_key) or bot.get_emoji(most_received_key)
                        if emoji_obj: return f"‚Ä¢ Top Nh·∫≠n: {str(emoji_obj)} ({top_count:,})"
                        else: return f"‚Ä¢ Top Nh·∫≠n ID: `{most_received_key}` ({top_count:,})"
                    elif isinstance(most_received_key, str):
                         try: unicodedata.name(most_received_key); return f"‚Ä¢ Top Nh·∫≠n: {most_received_key} ({top_count:,})"
                         except (TypeError, ValueError): return f"‚Ä¢ Top Nh·∫≠n: `{most_received_key}` ({top_count:,})"
                except (ValueError, IndexError): pass
        return None

    # <<< S·ª¨A L·ªñI: Th√™m tertiary_info_getter >>>
    return await _create_user_leaderboard_embed(
        title=f"{e('reaction')} BXH User Nh·∫≠n Reactions Nhi·ªÅu Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_REACTION_RECEIVED_USERS_LIMIT,
        item_name_singular="reaction",
        item_name_plural="reactions",
        e=e,
        color=discord.Color.gold(),
        filter_admins=False, # Kh√¥ng l·ªçc admin
        secondary_info_getter=get_top_received_emoji,
        tertiary_info_getter=lambda _, __: "Ch·ªâ t√≠nh reaction ƒë√£ l·ªçc.", # Footer
        minimum_value=1
    )
    # <<< K·∫æT TH√öC S·ª¨A L·ªñI >>>

async def create_top_distinct_channel_users_embed(
    scan_data: Dict[str, Any],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    user_distinct_counts: Counter = scan_data.get("user_distinct_channel_counts", Counter())
    user_channel_msg_counts: Dict[int, Dict[int, int]] = scan_data.get('user_channel_message_counts', {})

    async def get_top_channels(user_id, _):
        user_specific_channel_counts = user_channel_msg_counts.get(user_id, {})
        if user_specific_channel_counts:
            sorted_channels = sorted(user_specific_channel_counts.items(), key=lambda item: item[1], reverse=True)[:2]
            if sorted_channels:
                channel_details_line = []
                for loc_id, msg_count in sorted_channels:
                    channel_obj = guild.get_channel_or_thread(loc_id)
                    channel_mention = channel_obj.mention if channel_obj else f"`ID:{loc_id}`"
                    channel_type_emoji = utils.get_channel_type_emoji(channel_obj, bot) if channel_obj else "‚ùì"
                    channel_details_line.append(f"{channel_type_emoji}{channel_mention}({msg_count:,})")
                return f"‚Ä¢ Top: {', '.join(channel_details_line)}"
        return None

    return await _create_user_leaderboard_embed(
        title=f"üó∫Ô∏è BXH {TOP_DISTINCT_CHANNEL_USERS_LIMIT} \"Ng∆∞·ªùi ƒêa NƒÉng\" Nh·∫•t",
        counts=user_distinct_counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_DISTINCT_CHANNEL_USERS_LIMIT,
        item_name_singular="k√™nh/lu·ªìng",
        item_name_plural="k√™nh/lu·ªìng",
        e=e,
        color=discord.Color.dark_teal(),
        filter_admins=True,
        secondary_info_getter=get_top_channels,
        minimum_value=1
    )

async def create_top_activity_span_users_embed(
    user_activity: Dict[int, Dict[str, Any]],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    limit = TOP_ACTIVITY_SPAN_USERS_LIMIT # <<< S·ª¨A: ƒê·ªãnh nghƒ©a limit
    title = f"{e('clock')} BXH User Ho·∫°t ƒê·ªông L√¢u Nh·∫•t Server" # <<< S·ª¨A: Chuy·ªÉn title xu·ªëng sau limit
    # T·∫°o dict v·ªõi span ƒë√£ format l√†m gi√° tr·ªã ƒë·ªÉ hi·ªÉn th·ªã
    user_spans_formatted = {
        uid: utils.format_timedelta(datetime.timedelta(seconds=data.get('activity_span_seconds', 0.0)))
        for uid, data in user_activity.items()
        if not data.get('is_bot', False) and data.get('activity_span_seconds', 0.0) > 0
    }
    # T·∫°o counter v·ªõi gi√° tr·ªã gi√¢y ƒë·ªÉ s·∫Øp x·∫øp
    counts_for_sorting = collections.Counter({
        uid: data.get('activity_span_seconds', 0.0)
        for uid, data in user_activity.items()
        if not data.get('is_bot', False) and data.get('activity_span_seconds', 0.0) > 0
    })

    async def get_last_seen_span(user_id, _):
        user_act_data = user_activity.get(user_id)
        if user_act_data:
            last_seen = user_act_data.get('last_seen')
            return f"‚Ä¢ Seen: {utils.format_discord_time(last_seen, 'R')}" if last_seen else None
        return None

    # Helper m·ªõi c·∫ßn h·ªó tr·ª£ value_getter ho·∫∑c ƒëi·ªÅu ch·ªânh _format_user_tree_line
    # => Vi·∫øt l·∫°i logic embed n√†y kh√¥ng d√πng helper chung ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng
    if not counts_for_sorting: return None

    filtered_sorted_users_seconds = sorted(
        counts_for_sorting.items(),
        key=lambda item: item[1],
        reverse=True
    )
    # L·ªçc admin (n·∫øu c·∫ßn)
    admin_ids_to_filter: Optional[Set[int]] = None
    filter_admins = False # ƒê·∫∑t c·ªù filter_admins
    # if filter_admins: ...

    filtered_sorted_users = [
        (uid, user_spans_formatted.get(uid, "N/A")) # L·∫•y span ƒë√£ format
        for uid, _ in filtered_sorted_users_seconds
        if uid in user_spans_formatted # Ch·ªâ l·∫•y user c√≥ span ƒë√£ format
           and (not filter_admins or not isinstance(uid, int) or not admin_ids_to_filter or uid not in admin_ids_to_filter) # <<< S·ª¨A: S·ª≠a logic l·ªçc admin
    ]

    if not filtered_sorted_users: return None

    total_users_in_lb = len(filtered_sorted_users)
    users_to_display = filtered_sorted_users[:limit] # <<< S·ª¨A: D√πng bi·∫øn limit ƒë√£ ƒë·ªãnh nghƒ©a
    user_ids_to_fetch = [uid for uid, span_str in users_to_display if isinstance(uid, int)]
    user_cache = await utils._fetch_user_dict(guild, user_ids_to_fetch, bot)

    title_emoji = e('award') if e('award') != '‚ùì' else 'üèÜ'
    embed = discord.Embed(title=f"{title_emoji}{title}", color=discord.Color.dark_grey())
    desc_prefix = "*D·ª±a tr√™n kho·∫£ng TG gi·ªØa tin nh·∫Øn ƒë·∫ßu v√† cu·ªëi trong l·∫ßn qu√©t. ƒê√£ l·ªçc bot.*"
    if filter_admins: desc_prefix += " ƒê√£ l·ªçc admin*" # Th√™m ghi ch√∫ n·∫øu l·ªçc admin ƒë∆∞·ª£c b·∫≠t
    description_lines = [desc_prefix, ""]

    for rank, (user_id, span_str) in enumerate(users_to_display, 1):
        last_seen_str = await get_last_seen_span(user_id, None)
        lines = await _format_user_tree_line(
            rank, user_id, span_str, "span", "span", # Truy·ªÅn span ƒë√£ format
            guild, user_cache, secondary_info=last_seen_str
        )
        description_lines.extend(lines)

    if description_lines and description_lines[-1] == "": description_lines.pop()
    embed.description = "\n".join(description_lines)
    if len(embed.description) > 4096: embed.description = embed.description[:4090] + "\n[...]"
    if total_users_in_lb > limit: embed.set_footer(text=f"... v√† {total_users_in_lb - limit} ng∆∞·ªùi d√πng kh√°c.")
    return embed


async def create_top_thread_creators_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    # <<< S·ª¨A L·ªñI: Th√™m tertiary_info_getter >>>
    return await _create_user_leaderboard_embed(
        title=f"{e('thread')} Top User T·∫°o Thread",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=TOP_THREAD_CREATORS_LIMIT,
        item_name_singular="thread",
        item_name_plural="threads",
        e=e,
        color=discord.Color.dark_magenta(),
        filter_admins=True,
        tertiary_info_getter=lambda _, __: "Y√™u c·∫ßu quy·ªÅn View Audit Log.", # Footer
        minimum_value=1
    )
    # <<< K·∫æT TH√öC S·ª¨A L·ªñI >>>

# Gi·ªØ nguy√™n c√°c h√†m create_top_booster_embed v√† create_top_oldest_members_embed
# (Copy l·∫°i t·ª´ code g·ªëc n·∫øu c·∫ßn)
async def create_top_booster_embed(
    boosters: List[discord.Member],
    bot: discord.Client,
    scan_end_time: datetime.datetime
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    limit = 15
    title = f"{e('boost')} Top Booster B·ªÅn B·ªâ"
    color=discord.Color(0xf47fff)
    item_name_singular="boost duration"
    item_name_plural="boost duration"

    if not boosters: return None

    user_cache = {m.id: m for m in boosters}
    users_to_display = boosters[:limit]
    total_users_in_lb = len(boosters)

    title_emoji = e('award') if e('award') != '‚ùì' else 'üèÜ'
    embed = discord.Embed(title=f"{title_emoji} {title}", color=color)
    desc_prefix = "*S·∫Øp x·∫øp theo th·ªùi gian boost server l√¢u nh·∫•t.*"
    description_lines = [desc_prefix, ""]

    for rank, member in enumerate(users_to_display, 1):
        user_id = member.id
        boost_duration_str = "N/A"
        boost_start_str = ""
        if member.premium_since:
            boost_start_str = f"‚Ä¢ Boost t·ª´: {utils.format_discord_time(member.premium_since, 'D')}"
            try:
                scan_end_time_aware = scan_end_time if scan_end_time.tzinfo else scan_end_time.replace(tzinfo=datetime.timezone.utc)
                premium_since_aware = member.premium_since if member.premium_since.tzinfo else member.premium_since.replace(tzinfo=datetime.timezone.utc)
                if scan_end_time_aware >= premium_since_aware:
                    boost_duration = scan_end_time_aware - premium_since_aware
                    boost_duration_str = utils.format_timedelta(boost_duration)
                else: boost_duration_str = "L·ªói TG"
            except Exception as td_err: log.warning(f"L·ªói t√≠nh time boost {user_id}: {td_err}"); boost_duration_str = "L·ªói TG"

        lines = await _format_user_tree_line(
            rank, user_id, boost_duration_str, item_name_singular, item_name_plural,
            member.guild, user_cache, secondary_info=boost_start_str if boost_start_str else None
        )
        description_lines.extend(lines)

    if description_lines and description_lines[-1] == "": description_lines.pop()
    embed.description = "\n".join(description_lines)
    if len(embed.description) > 4096: embed.description = embed.description[:4090] + "\n[...]"
    if total_users_in_lb > limit: embed.set_footer(text=f"... v√† {total_users_in_lb - limit} booster kh√°c.")
    return embed

async def create_top_oldest_members_embed(
    oldest_members_data: List[Dict[str, Any]],
    scan_data: Dict[str, Any],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot],
    limit: int = TOP_OLDEST_MEMBERS_LIMIT
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    title = f"{e('calendar')} BXH Th√†nh Vi√™n L√¢u NƒÉm Nh·∫•t Server"
    color=discord.Color.dark_grey()
    item_name_singular="member"
    item_name_plural="members"

    if not oldest_members_data: return None

    user_activity = scan_data.get("user_activity", {})
    user_most_active_channel = scan_data.get("user_most_active_channel", {})
    users_to_display = oldest_members_data[:limit]
    user_ids_to_fetch = [data['id'] for data in users_to_display if 'id' in data]
    user_cache = await utils._fetch_user_dict(guild, user_ids_to_fetch, bot)
    now_utc = datetime.datetime.now(datetime.timezone.utc)

    title_emoji = e('award') if e('award') != '‚ùì' else 'üèÜ'
    embed = discord.Embed(title=f"{title_emoji} {title}", color=color)
    desc_prefix = f"*D·ª±a tr√™n ng√†y tham gia server. Hi·ªÉn th·ªã top {limit}.*"
    description_lines = [desc_prefix, ""]

    for rank, data in enumerate(users_to_display, 1):
        user_id = data.get('id')
        if not user_id: continue

        joined_at = data.get('joined_at')
        main_value_str = utils.format_discord_time(joined_at, 'D') if joined_at else "N/A"

        time_in_server_str = ""
        if isinstance(joined_at, datetime.datetime):
            try:
                join_aware = joined_at.astimezone(datetime.timezone.utc) if joined_at.tzinfo else joined_at.replace(tzinfo=datetime.timezone.utc)
                if now_utc >= join_aware: time_in_server_str = f"‚Ä¢ TG: {utils.format_timedelta(now_utc - join_aware)}"
            except Exception: pass

        tertiary_info_parts = []
        user_act_data = user_activity.get(user_id)
        if user_act_data:
            last_seen = user_act_data.get('last_seen')
            if last_seen: tertiary_info_parts.append(f"Seen: {utils.format_discord_time(last_seen, 'R')}")
            most_active_data = user_most_active_channel.get(user_id)
            if most_active_data:
                loc_id, _ = most_active_data
                channel_obj = guild.get_channel_or_thread(loc_id)
                if channel_obj: tertiary_info_parts.append(f"Top k√™nh: {channel_obj.mention}")
        tertiary_info = " ‚Ä¢ ".join(tertiary_info_parts) if tertiary_info_parts else None

        lines = await _format_user_tree_line(
            rank, user_id, main_value_str, item_name_singular, item_name_plural,
            guild, user_cache,
            secondary_info=time_in_server_str if time_in_server_str else None,
            tertiary_info=tertiary_info
        )
        description_lines.extend(lines)

    if description_lines and description_lines[-1] == "": description_lines.pop()
    embed.description = "\n".join(description_lines)
    if len(embed.description) > 4096: embed.description = embed.description[:4090] + "\n[...]"
    return embed


# --- C√ÅC H√ÄM T·∫†O EMBED "√çT NH·∫§T" ---

async def create_least_active_users_embed(
    user_activity: Dict[int, Dict[str, Any]],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    async def get_last_seen(user_id, data_source): # Gi·ªëng h√†m tr√™n
        user_act_data = data_source.get(user_id)
        if user_act_data:
            last_seen = user_act_data.get('last_seen')
            return f"‚Ä¢ L·∫ßn cu·ªëi Hƒê: {utils.format_discord_time(last_seen, 'R')}" if last_seen else None
        return None

    return await _create_user_leaderboard_embed(
        title=f"{e('stats')} BXH User G·ª≠i Tin Nh·∫Øn √çt Nh·∫•t",
        counts=user_activity,
        value_key='message_count',
        guild=guild,
        bot=bot,
        limit=LEAST_ACTIVE_USERS_LIMIT,
        item_name_singular="tin nh·∫Øn",
        item_name_plural="tin nh·∫Øn",
        e=e,
        color=discord.Color.light_grey(), # M√†u kh√°c
        filter_admins=True,
        sort_ascending=True, # S·∫Øp x·∫øp tƒÉng d·∫ßn
        secondary_info_getter=get_last_seen,
        minimum_value=1 # Ch·ªâ x√©t ng∆∞·ªùi c√≥ > 0 tin nh·∫Øn
    )

async def create_least_link_posters_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('link')} BXH User G·ª≠i Link √çt Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_LINK_USERS_LIMIT,
        item_name_singular="link",
        item_name_plural="links",
        e=e,
        color=discord.Color.from_rgb(173, 216, 230), # Light blue
        filter_admins=True,
        sort_ascending=True,
        minimum_value=1
    )

async def create_least_image_posters_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('image')} BXH User G·ª≠i ·∫¢nh √çt Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_IMAGE_USERS_LIMIT,
        item_name_singular="·∫£nh",
        item_name_plural="·∫£nh",
        e=e,
        color=discord.Color.from_rgb(144, 238, 144), # Light green
        filter_admins=True,
        sort_ascending=True,
        minimum_value=1
    )

async def create_least_custom_emoji_users_embed(
    scan_data: Dict[str, Any],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    user_detailed_counts: Dict[int, Counter] = scan_data.get("user_custom_emoji_content_counts", {})
    user_total_counts = collections.Counter({
        uid: sum(ecounts.values())
        for uid, ecounts in user_detailed_counts.items()
        if sum(ecounts.values()) > 0 # Ch·ªâ x√©t ng∆∞·ªùi c√≥ d√πng > 0
    })
    emoji_cache: Dict[int, discord.Emoji] = scan_data.get("server_emojis_cache", {})

    async def get_top_emoji(user_id, data_source): # Gi·ªëng h√†m tr√™n
        user_specific_counts = data_source.get(user_id, Counter())
        if user_specific_counts:
            try:
                most_used_id, top_count = user_specific_counts.most_common(1)[0]
                emoji_obj = emoji_cache.get(most_used_id) or bot.get_emoji(most_used_id)
                if emoji_obj: return f"‚Ä¢ Top: {str(emoji_obj)} ({top_count:,})"
                else: return f"‚Ä¢ Top ID: `{most_used_id}` ({top_count:,})"
            except (ValueError, IndexError): pass
        return None

    return await _create_user_leaderboard_embed(
        title=f"{e('mention')} BXH User D√πng Emoji Server √çt Nh·∫•t",
        counts=user_total_counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_EMOJI_USERS_LIMIT,
        item_name_singular="emoji",
        item_name_plural="emojis",
        e=e,
        color=discord.Color.from_rgb(255, 223, 186), # Light gold/orange
        filter_admins=True,
        sort_ascending=True,
        secondary_info_getter=lambda uid, _: get_top_emoji(uid, user_detailed_counts),
        minimum_value=1
    )

async def create_least_sticker_users_embed(
    scan_data: Dict[str, Any],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    user_detailed_counts: Dict[int, Counter] = scan_data.get("user_sticker_id_counts", {})
    user_total_counts: Counter = scan_data.get("user_sticker_counts", Counter())
    sticker_ids_to_fetch_names = set()
    # L·∫•y sticker ID t·ª´ t·∫•t c·∫£ user trong counter ƒë·ªÉ fetch t√™n 1 l·∫ßn
    for user_id, _ in user_total_counts.items():
         user_specific_counts = user_detailed_counts.get(user_id, Counter())
         if user_specific_counts:
             try:
                 if user_specific_counts:
                     most_used_id_str, _ = user_specific_counts.most_common(1)[0]
                     if most_used_id_str.isdigit(): sticker_ids_to_fetch_names.add(int(most_used_id_str))
             except (ValueError, IndexError): pass
    sticker_name_cache: Dict[int, str] = {}
    if sticker_ids_to_fetch_names:
        sticker_name_cache = await utils._fetch_sticker_dict(list(sticker_ids_to_fetch_names), bot)

    async def get_top_sticker(user_id, data_source): # Gi·ªëng h√†m tr√™n
        user_specific_counts_display = data_source.get(user_id, Counter())
        if user_specific_counts_display:
            try:
                most_used_id_str_display, top_count = user_specific_counts_display.most_common(1)[0]
                if most_used_id_str_display.isdigit():
                    sticker_id = int(most_used_id_str_display)
                    sticker_name = sticker_name_cache.get(sticker_id, "...")
                    return f"‚Ä¢ Top: '{utils.escape_markdown(sticker_name)}' ({top_count:,})"
                else:
                    return f"‚Ä¢ Top ID: `{most_used_id_str_display}` ({top_count:,})"
            except (ValueError, IndexError): pass
        return None

    return await _create_user_leaderboard_embed(
        title=f"{e('sticker')} BXH User G·ª≠i Sticker √çt Nh·∫•t",
        counts=user_total_counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_STICKER_USERS_LIMIT,
        item_name_singular="sticker",
        item_name_plural="stickers",
        e=e,
        color=discord.Color.from_rgb(221, 160, 221), # Light purple
        filter_admins=True,
        sort_ascending=True,
        secondary_info_getter=lambda uid, _: get_top_sticker(uid, user_detailed_counts),
        minimum_value=1
    )

async def create_least_mentioned_users_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('mention')} BXH User ƒê∆∞·ª£c Nh·∫Øc T√™n √çt Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_MENTIONED_USERS_LIMIT,
        item_name_singular="l·∫ßn",
        item_name_plural="l·∫ßn",
        e=e,
        color=discord.Color.from_rgb(218, 112, 214), # Orchid
        filter_admins=False, # Kh√¥ng l·ªçc admin
        sort_ascending=True,
        minimum_value=1
    )

async def create_least_mentioning_users_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('mention')} Top User √çt Nh·∫Øc T√™n Ng∆∞·ªùi Kh√°c Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_MENTIONING_USERS_LIMIT,
        item_name_singular="l·∫ßn nh·∫Øc",
        item_name_plural="l·∫ßn nh·∫Øc",
        e=e,
        color=discord.Color.from_rgb(186, 85, 211), # Medium Orchid
        filter_admins=True,
        sort_ascending=True,
        minimum_value=1
    )

async def create_least_repliers_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('reply')} BXH User √çt Tr·∫£ L·ªùi Tin Nh·∫Øn Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_REPLIERS_LIMIT,
        item_name_singular="l·∫ßn tr·∫£ l·ªùi",
        item_name_plural="l·∫ßn tr·∫£ l·ªùi",
        e=e,
        color=discord.Color.from_rgb(100, 149, 237), # Cornflower Blue
        filter_admins=True,
        sort_ascending=True,
        minimum_value=1
    )

async def create_least_reaction_received_users_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('reaction')} BXH User Nh·∫≠n Reactions √çt Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_REACTION_RECEIVED_USERS_LIMIT,
        item_name_singular="reaction",
        item_name_plural="reactions",
        e=e,
        color=discord.Color.from_rgb(255, 215, 0), # Gold (light variant)
        filter_admins=False, # Kh√¥ng l·ªçc admin
        sort_ascending=True,
        tertiary_info_getter=lambda _, __: "Ch·ªâ t√≠nh reaction ƒë√£ l·ªçc.", # Footer
        minimum_value=1
    )

async def create_least_reaction_givers_embed(
    user_reaction_given_counts: Counter,
    guild: discord.Guild,
    bot: discord.Client
) -> Optional[discord.Embed]:
    """T·∫°o embed x·∫øp h·∫°ng ng∆∞·ªùi d√πng th·∫£ reaction √≠t nh·∫•t."""
    e = lambda name: utils.get_emoji(name, bot)
    return await _create_user_leaderboard_embed(
        title=f"{e('reaction')} BXH User Th·∫£ Reaction √çt Nh·∫•t",
        counts=user_reaction_given_counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_REACTION_GIVERS_LIMIT,
        item_name_singular="reaction",
        item_name_plural="reactions",
        e=e,
        color=discord.Color.from_rgb(64, 224, 208), # Turquoise
        filter_admins=True,
        sort_ascending=True,
        tertiary_info_getter=lambda _, __: "Ch·ªâ t√≠nh reaction ƒë√£ l·ªçc.", # Footer
        minimum_value=1
    )

async def create_least_distinct_channel_users_embed(
    scan_data: Dict[str, Any],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    user_distinct_counts: Counter = scan_data.get("user_distinct_channel_counts", Counter())
    # Kh√¥ng c·∫ßn hi·ªÉn th·ªã top k√™nh ho·∫°t ƒë·ªông √≠t nh·∫•t
    return await _create_user_leaderboard_embed(
        title=f"üó∫Ô∏è BXH {LEAST_DISTINCT_CHANNEL_USERS_LIMIT} \"Ng∆∞·ªùi ·∫®n D·∫≠t\" Nh·∫•t",
        counts=user_distinct_counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_DISTINCT_CHANNEL_USERS_LIMIT,
        item_name_singular="k√™nh/lu·ªìng",
        item_name_plural="k√™nh/lu·ªìng",
        e=e,
        color=discord.Color.from_rgb(0, 139, 139), # Dark Cyan
        filter_admins=True,
        sort_ascending=True,
        minimum_value=1
    )

async def create_least_activity_span_users_embed(
    user_activity: Dict[int, Dict[str, Any]],
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    limit = LEAST_ACTIVITY_SPAN_USERS_LIMIT # <<< ƒê·∫∑t limit
    title = f"{e('clock')} BXH User Ho·∫°t ƒê·ªông Ng·∫Øn Nh·∫•t Server" # <<< ƒê·∫∑t title
    # T·∫°m th·ªùi vi·∫øt l·∫°i logic embed n√†y kh√¥ng d√πng helper chung
    # v√¨ helper ch∆∞a h·ªó tr·ª£ t·ªët vi·ªác hi·ªÉn th·ªã gi√° tr·ªã ƒë√£ format (timedelta)
    user_spans_seconds = {
        uid: data.get('activity_span_seconds', 0.0)
        for uid, data in user_activity.items()
        if not data.get('is_bot', False) and data.get('activity_span_seconds', 0.0) > 0 # Ch·ªâ x√©t ng∆∞·ªùi c√≥ span > 0
    }
    if not user_spans_seconds: return None

    # S·∫Øp x·∫øp user theo span tƒÉng d·∫ßn
    sorted_users_by_span = sorted(user_spans_seconds.items(), key=lambda item: item[1])

    # L·ªçc admin n·∫øu c·∫ßn (filter_admins=False cho span)
    admin_ids_to_filter: Optional[Set[int]] = None
    filter_admins = False # ƒê·∫∑t c·ªù filter_admins
    # if filter_admins: ...

    filtered_sorted_users = [
        (uid, user_activity[uid]) # L·∫•y c·∫£ data ƒë·ªÉ l·∫•y last_seen v√† span g·ªëc
        for uid, span_sec in sorted_users_by_span
        if (not filter_admins or not isinstance(uid, int) or not admin_ids_to_filter or uid not in admin_ids_to_filter)
    ]

    if not filtered_sorted_users: return None

    total_users_in_lb = len(filtered_sorted_users)
    users_to_display = filtered_sorted_users[:limit] # D√πng bi·∫øn limit
    user_ids_to_fetch = [uid for uid, data in users_to_display if isinstance(uid, int)]
    user_cache = await utils._fetch_user_dict(guild, user_ids_to_fetch, bot)

    title_emoji = 'üìâ' # Emoji cho list "√≠t nh·∫•t"
    embed = discord.Embed(title=f"{title_emoji}{title}", color=discord.Color.from_rgb(119, 136, 153))
    desc_prefix = "*D·ª±a tr√™n kho·∫£ng TG gi·ªØa tin nh·∫Øn ƒë·∫ßu v√† cu·ªëi. Ch·ªâ t√≠nh user c√≥ span > 0s. ƒê√£ l·ªçc bot.*"
    if filter_admins: desc_prefix += " ƒê√£ l·ªçc admin*"
    description_lines = [desc_prefix, ""]

    for rank, (user_id, data) in enumerate(users_to_display, 1):
        span_sec = data.get('activity_span_seconds', 0.0)
        span_str = utils.format_timedelta(datetime.timedelta(seconds=span_sec))
        last_seen = data.get('last_seen')
        last_seen_str = f"‚Ä¢ Seen: {utils.format_discord_time(last_seen, 'R')}" if last_seen else None

        lines = await _format_user_tree_line(
            rank, user_id, span_str, "span", "span",
            guild, user_cache, secondary_info=last_seen_str
        )
        description_lines.extend(lines)

    if description_lines and description_lines[-1] == "": description_lines.pop()
    embed.description = "\n".join(description_lines)
    if len(embed.description) > 4096: embed.description = embed.description[:4090] + "\n[...]"
    if total_users_in_lb > limit: embed.set_footer(text=f"... v√† {total_users_in_lb - limit} ng∆∞·ªùi d√πng kh√°c.")
    return embed


async def create_least_thread_creators_embed(
    counts: collections.Counter,
    guild: discord.Guild,
    bot: Union[discord.Client, commands.Bot]
) -> Optional[discord.Embed]:
    e = lambda name: utils.get_emoji(name, bot)
    # <<< S·ª¨A L·ªñI: Th√™m tertiary_info_getter >>>
    return await _create_user_leaderboard_embed(
        title=f"{e('thread')} Top User √çt T·∫°o Thread Nh·∫•t",
        counts=counts,
        value_key=None,
        guild=guild,
        bot=bot,
        limit=LEAST_THREAD_CREATORS_LIMIT,
        item_name_singular="thread",
        item_name_plural="threads",
        e=e,
        color=discord.Color.from_rgb(147, 112, 219), # Medium Purple
        filter_admins=True,
        sort_ascending=True,
        tertiary_info_getter=lambda _, __: "Y√™u c·∫ßu quy·ªÅn View Audit Log.", # Footer
        minimum_value=1 # Ch·ªâ t√≠nh ng∆∞·ªùi c√≥ t·∫°o > 0 thread
    )
    # <<< K·∫æT TH√öC S·ª¨A L·ªñI >>>


# --- START HELPER FUNCTION (Gi·ªØ nguy√™n) ---
async def _fetch_sample_message(
    guild: discord.Guild,
    user_id: int,
    timestamp: Optional[datetime.datetime],
    channels_to_check: Set[int],
    most_active_channel_id: Optional[int],
    fetch_mode: str = 'around' # 'around', 'before', 'after', 'latest', 'oldest'
) -> Optional[discord.Message]:
    """Helper ƒë·ªÉ fetch m·ªôt tin nh·∫Øn m·∫´u."""
    if not guild: return None
    if not timestamp and fetch_mode not in ['latest', 'oldest']:
        return None

    channel_ids_ordered = []
    if most_active_channel_id and most_active_channel_id in channels_to_check:
        channel_ids_ordered.append(most_active_channel_id)
    other_channels = list(channels_to_check - {most_active_channel_id})
    channel_ids_ordered.extend(other_channels[:5])

    if not channel_ids_ordered:
        return None

    for channel_id in channel_ids_ordered:
        channel = guild.get_channel(channel_id)
        if not channel or not isinstance(channel, (discord.TextChannel, discord.VoiceChannel, discord.Thread)):
            continue
        try: # B·ªçc try-except cho is_deleted()
            if channel.is_deleted():
                 log.debug(f"Skipping fetch in channel {channel_id} for user {user_id}: Channel is deleted.")
                 continue
        except AttributeError: # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p channel kh√¥ng c√≥ is_deleted (hi·∫øm)
            log.warning(f"Channel object type {type(channel)} (ID: {channel_id}) does not have is_deleted attribute.")
            # C√≥ th·ªÉ b·ªè qua ho·∫∑c ti·∫øp t·ª•c t√πy logic
            continue

        if not channel.permissions_for(guild.me).read_message_history:
            log.debug(f"Skipping fetch in channel {channel_id} for user {user_id}: Missing Read History perms.")
            continue

        try:
            history_params = {'limit': 1}
            if fetch_mode == 'around' and timestamp: history_params['around'] = timestamp
            elif fetch_mode == 'before' and timestamp: history_params['before'] = timestamp
            elif fetch_mode == 'after' and timestamp: history_params['after'] = timestamp
            elif fetch_mode == 'latest': pass
            elif fetch_mode == 'oldest': history_params['oldest_first'] = True

            async for msg in channel.history(**history_params):
                if msg.author.id == user_id:
                    log.debug(f"Fetched sample message {msg.id} for user {user_id} (mode: {fetch_mode}) in channel {channel_id}")
                    return msg
        except discord.NotFound:
            log.debug(f"Channel {channel_id} not found during sample message fetch.")
        except discord.Forbidden:
            log.debug(f"Forbidden to fetch history in channel {channel_id} for user {user_id}.")
        except discord.HTTPException as http_err:
            log.warning(f"HTTP Error {http_err.status} fetching history in {channel_id} for user {user_id}.")
        except Exception as e:
            log.error(f"Unknown error fetching sample message in {channel_id} for user {user_id}: {e}", exc_info=False)

    log.debug(f"Could not find sample message for user {user_id} (mode: {fetch_mode}) after checking {len(channel_ids_ordered)} channels.")
    return None
# --- END HELPER FUNCTION ---

# --- END OF FILE reporting/embeds_user.py ---