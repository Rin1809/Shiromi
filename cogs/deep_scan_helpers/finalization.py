# --- START OF FILE cogs/deep_scan_helpers/finalization.py ---
import discord
from discord.ext import commands
import logging
import time
import datetime
from typing import Dict, Any, List, Optional

import config
import utils

log = logging.getLogger(__name__)

async def finalize_scan(scan_data: Dict[str, Any]):
    """G·ª≠i tin nh·∫Øn t·ªïng k·∫øt cu·ªëi c√πng v√† ƒë√≥ng c√°c file (n·∫øu c√≥)."""
    ctx: commands.Context = scan_data["ctx"]
    bot: commands.Bot = scan_data["bot"]
    server: discord.Guild = scan_data["server"] # <<< ADDED: L·∫•y server object
    e = lambda name: utils.get_emoji(name, bot)
    files_to_send: List[discord.File] = scan_data["files_to_send"]
    scan_errors: List[str] = scan_data["scan_errors"]
    start_time_cmd: float = scan_data["start_time_cmd"]
    log_thread: Optional[discord.Thread] = scan_data.get("log_thread")
    report_messages_sent: int = scan_data.get("report_messages_sent", 0)

    log.info(f"{e('loading')} ƒêang ho√†n t·∫•t l·ªánh qu√©t...")

    # X√≥a tin nh·∫Øn tr·∫°ng th√°i ban ƒë·∫ßu/cu·ªëi c√πng n·∫øu c√≤n
    initial_status_msg = scan_data.get("initial_status_msg")
    status_message = scan_data.get("status_message")
    msg_to_delete = status_message or initial_status_msg
    if msg_to_delete:
        try:
            await msg_to_delete.delete()
        except (discord.NotFound, discord.HTTPException) as del_err:
            log.debug(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn tr·∫°ng th√°i ({msg_to_delete.id}): {del_err}")
        except Exception as del_e:
             log.warning(f"L·ªói l·∫° khi x√≥a tin nh·∫Øn tr·∫°ng th√°i ({msg_to_delete.id}): {del_e}")

    # T√≠nh t·ªïng th·ªùi gian ch·∫°y l·ªánh
    end_time_cmd = time.monotonic()
    total_cmd_duration_secs = end_time_cmd - start_time_cmd
    total_cmd_duration_td = datetime.timedelta(seconds=total_cmd_duration_secs)
    scan_data["overall_duration"] = total_cmd_duration_td # C·∫≠p nh·∫≠t th·ªùi gian t·ªïng cu·ªëi c√πng

    # Chu·∫©n b·ªã n·ªôi dung tin nh·∫Øn cu·ªëi c√πng
    final_message_lines = [
        f"{e('success')} **ƒê√£ Ho√†n Th√†nh B√°o C√°o!**",
        f"{e('clock')} T·ªïng th·ªùi gian l·ªánh: **{utils.format_timedelta(total_cmd_duration_td, high_precision=True)}**",
        f"{e('stats')} ƒê√£ g·ª≠i **{report_messages_sent}** tin nh·∫Øn b√°o c√°o."
    ]

    if log_thread:
        final_message_lines.append(f"{e('info')} Xem log chi ti·∫øt t·∫°i: {log_thread.mention}")
    else:
        final_message_lines.append(f"{e('info')} Log chi ti·∫øt ch·ªâ c√≥ tr√™n Console.")

    # Th√™m th√¥ng tin v·ªÅ file xu·∫•t
    if files_to_send:
        file_tags = []
        if any(f.filename.endswith('.csv') for f in files_to_send):
            file_tags.append(f"{e('csv_file')} CSV")
        if any(f.filename.endswith('.json') for f in files_to_send):
            file_tags.append(f"{e('json_file')} JSON")
        file_tags_str = " / ".join(file_tags) or "file" # Fallback "file" n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
        final_message_lines.append(f"üìé ƒê√≠nh k√®m **{len(files_to_send)}** {file_tags_str}.")
    elif scan_data["export_csv"] or scan_data["export_json"]:
        # C√≥ y√™u c·∫ßu export nh∆∞ng kh√¥ng c√≥ file (do l·ªói ho·∫∑c k√≠ch th∆∞·ªõc)
        final_message_lines.append(f"{e('error')} Y√™u c·∫ßu xu·∫•t file nh∆∞ng kh√¥ng th·ªÉ t·∫°o/g·ª≠i (ki·ªÉm tra log/l·ªói).")

    # Th√™m th√¥ng b√°o l·ªói n·∫øu c√≥
    if scan_errors:
        final_message_lines.append(f"{e('warning')} L∆∞u √Ω: C√≥ **{len(scan_errors)}** l·ªói/c·∫£nh b√°o (xem b√°o c√°o l·ªói ho·∫∑c log).")

    # --- L·∫•y Sticker cu·ªëi c√πng (n·∫øu c·∫•u h√¨nh) ---
    final_sticker_to_send: Optional[discord.Sticker] = None
    can_use_final_sticker = False
    if config.FINAL_STICKER_ID:
        try:
            log.debug(f"Fetching final sticker ID: {config.FINAL_STICKER_ID}")
            final_sticker_to_send = await bot.fetch_sticker(config.FINAL_STICKER_ID)
            if final_sticker_to_send:
                log.debug(f"Fetched sticker: {final_sticker_to_send.name}")
                # <<< FIX: Ki·ªÉm tra xem bot c√≥ th·ªÉ d√πng sticker n√†y kh√¥ng >>>
                if final_sticker_to_send.available:
                    # N·∫øu l√† sticker server, ki·ªÉm tra xem c√≥ thu·ªôc server hi·ªán t·∫°i kh√¥ng
                    if isinstance(final_sticker_to_send, discord.GuildSticker):
                        if final_sticker_to_send.guild_id == server.id:
                            can_use_final_sticker = True
                            log.debug("Bot c√≥ th·ªÉ d√πng sticker server n√†y.")
                        else:
                            log.warning(f"Sticker {final_sticker_to_send.id} thu·ªôc server kh√°c ({final_sticker_to_send.guild_id}), bot kh√¥ng th·ªÉ d√πng.")
                    else: # Sticker m·∫∑c ƒë·ªãnh (√≠t kh·∫£ nƒÉng fetch ƒë∆∞·ª£c b·∫±ng ID)
                        can_use_final_sticker = True # Gi·∫£ s·ª≠ bot d√πng ƒë∆∞·ª£c sticker m·∫∑c ƒë·ªãnh n·∫øu fetch ƒë∆∞·ª£c
                else:
                     log.warning(f"Sticker {final_sticker_to_send.id} kh√¥ng available.")
                # <<< END FIX >>>
            else:
                 log.warning(f"Kh√¥ng t√¨m th·∫•y sticker ID {config.FINAL_STICKER_ID} sau khi fetch.")

        except discord.NotFound:
             log.warning(f"Kh√¥ng t√¨m th·∫•y sticker ID {config.FINAL_STICKER_ID}.")
             scan_errors.append(f"Kh√¥ng t√¨m th·∫•y sticker ID {config.FINAL_STICKER_ID}.")
        except discord.HTTPException as e_sticker_http:
             log.warning(f"L·ªói HTTP khi fetch sticker {config.FINAL_STICKER_ID}: {e_sticker_http.status}")
             scan_errors.append(f"L·ªói HTTP l·∫•y sticker ID {config.FINAL_STICKER_ID}.")
        except Exception as e_sticker:
            log.warning(f"L·ªói kh√¥ng x√°c ƒë·ªãnh fetch sticker {config.FINAL_STICKER_ID}: {e_sticker}", exc_info=True)
            scan_errors.append(f"L·ªói l·∫•y sticker ID {config.FINAL_STICKER_ID}.")

    # --- G·ª≠i tin nh·∫Øn cu·ªëi c√πng v√† file (n·∫øu c√≥) ---
    final_message = "\n".join(final_message_lines)
    try:
        # T·∫°o dict kwargs ƒë·ªÉ d·ªÖ qu·∫£n l√Ω
        kwargs_send: Dict[str, Any] = {
            "content": final_message,
            "allowed_mentions": discord.AllowedMentions.none() # Kh√¥ng ping ai trong tin nh·∫Øn cu·ªëi
        }
        if files_to_send:
            kwargs_send["files"] = files_to_send # List c√°c discord.File

        # <<< FIX: Ch·ªâ th√™m sticker n·∫øu bot c√≥ th·ªÉ d√πng >>>
        if can_use_final_sticker and final_sticker_to_send:
            kwargs_send["stickers"] = [final_sticker_to_send] # Ph·∫£i l√† list
        elif final_sticker_to_send and not can_use_final_sticker:
            log.info("Kh√¥ng g·ª≠i sticker cu·ªëi c√πng do bot kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng.")
        # <<< END FIX >>>

        await ctx.send(**kwargs_send)
        log.info(f"{e('success')} ƒê√£ g·ª≠i tin nh·∫Øn b√°o c√°o cu·ªëi c√πng.")

    except discord.HTTPException as e_final:
        log.error(f"{e('error')} L·ªói g·ª≠i tin nh·∫Øn/file cu·ªëi c√πng (HTTP {e_final.status}): {e_final.text}", exc_info=True)
        try:
            # Th·ª≠ g·ª≠i l·∫°i ch·ªâ n·ªôi dung text n·∫øu g·ª≠i file/sticker l·ªói
            await ctx.send(f"{final_message}\n\n{e('error')} **L·ªói:** Kh√¥ng th·ªÉ g·ª≠i file ƒë√≠nh k√®m ho·∫∑c sticker.")
        except Exception:
            log.error("Kh√¥ng th·ªÉ g·ª≠i l·∫°i tin nh·∫Øn cu·ªëi c√πng sau l·ªói HTTP.")
    except Exception as e_final_unkn:
        log.error(f"{e('error')} L·ªói kh√¥ng x√°c ƒë·ªãnh g·ª≠i tin nh·∫Øn/file cu·ªëi c√πng: {e_final_unkn}", exc_info=True)
        try:
            await ctx.send(f"{final_message}\n\n{e('error')} **L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i b√°o c√°o cu·ªëi c√πng.**")
        except Exception:
            log.error("Kh√¥ng th·ªÉ g·ª≠i l·∫°i tin nh·∫Øn cu·ªëi c√πng sau l·ªói kh√¥ng x√°c ƒë·ªãnh.")
    finally:
        # --- QUAN TR·ªåNG: ƒê√≥ng file handles ---
        if files_to_send:
            log.debug(f"ƒê√≥ng {len(files_to_send)} file handles...")
            for f in files_to_send:
                try:
                    f.close()
                except Exception as close_err:
                    log.warning(f"L·ªói ƒë√≥ng file '{f.filename}': {close_err}")
            log.debug("ƒê√≥ng file handles ho√†n t·∫•t.")

    # --- Log k·∫øt th√∫c qu√©t ---
    log.info(f"\n--- [bold green]{e('success')} Qu√©t S√¢u To√†n B·ªô cho {scan_data['server'].name} ({scan_data['server'].id}) HO√ÄN T·∫§T[/bold green] ---")
    log.info(f"{e('clock')} T·ªïng th·ªùi gian th·ª±c thi l·ªánh: [bold magenta]{total_cmd_duration_secs:.2f}[/] gi√¢y")
    if scan_errors:
        log.warning(f"{e('warning')} Qu√©t ho√†n th√†nh v·ªõi [yellow]{len(scan_errors)}[/] l·ªói/c·∫£nh b√°o.")
    else:
        log.info(f"{e('success')} Qu√©t ho√†n th√†nh kh√¥ng c√≥ l·ªói/c·∫£nh b√°o ƒë√°ng k·ªÉ.")

# --- END OF FILE cogs/deep_scan_helpers/finalization.py ---