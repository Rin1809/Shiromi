# --- START OF FILE reporting/embeds_dm.py ---
import discord
from discord.ext import commands
import datetime
import logging
from typing import Dict, Any, Optional, Union, Tuple, List
from collections import Counter

import config
import utils

log = logging.getLogger(__name__)

async def create_personal_activity_embed(
    member: discord.Member,
    scan_data: Dict[str, Any],
    bot: commands.Bot,
    ranking_data: Dict[str, Dict[int, int]] # Th√™m ranking_data
) -> Optional[discord.Embed]:
    """T·∫°o Embed ch√≠nh hi·ªÉn th·ªã ho·∫°t ƒë·ªông c√° nh√¢n c·ªßa user."""
    e = lambda name: utils.get_emoji(name, bot)
    user_id = member.id
    user_activity_data = scan_data.get("user_activity", {}).get(user_id)

    if not user_activity_data:
        log.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ho·∫°t ƒë·ªông cho {member.display_name} ({user_id}) ƒë·ªÉ t·∫°o DM embed.")
        return None

    embed = discord.Embed(
        title=f"{e('user_activity')} Ho·∫°t ƒë·ªông c·ªßa B·∫°n tr√™n {member.guild.name}",
        color=member.color if member.color.value != 0 else discord.Color.blue()
    )
    if member.display_avatar:
        embed.set_thumbnail(url=member.display_avatar.url)

    # --- Field 1: Tin nh·∫Øn & N·ªôi dung ---
    msg_count = user_activity_data.get('message_count', 0)
    # L·∫•y h·∫°ng t·ª´ ranking_data
    msg_rank = ranking_data.get('messages', {}).get(user_id)
    msg_rank_str = f"(H·∫°ng: **#{msg_rank}**)" if msg_rank else "" # Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ h·∫°ng
    link_count = user_activity_data.get('link_count', 0)
    img_count = user_activity_data.get('image_count', 0)
    # L·∫•y counter custom emoji c·ªßa user n√†y
    user_custom_emoji_counts = scan_data.get("user_custom_emoji_content_counts", {}).get(user_id, Counter())
    custom_emoji_total_count = sum(user_custom_emoji_counts.values())
    sticker_count = user_activity_data.get('sticker_count', 0)
    other_file_count = user_activity_data.get('other_file_count', 0)

    content_lines = [
        f"{e('stats')} T·ªïng tin nh·∫Øn: **{msg_count:,}** {msg_rank_str}".strip(),
        f"{e('link')} Links ƒë√£ g·ª≠i: {link_count:,}",
        f"{e('image')} ·∫¢nh ƒë√£ g·ª≠i: {img_count:,}",
        f"{utils.get_emoji('mention', bot)} Emoji Server (Content): {custom_emoji_total_count:,}", # Gi·∫£ s·ª≠ utils.get_emoji ƒë√£ x·ª≠ l√Ω bot ref
        f"{e('sticker')} Stickers ƒë√£ g·ª≠i: {sticker_count:,}",
        f"üìé Files kh√°c: {other_file_count:,}"
    ]
    embed.add_field(name="üìú Tin Nh·∫Øn & N·ªôi Dung", value="\n".join(content_lines), inline=False)

    # --- Field 2: T∆∞∆°ng t√°c ---
    reply_count = user_activity_data.get('reply_count', 0)
    mention_given = user_activity_data.get('mention_given_count', 0)
    mention_received = user_activity_data.get('mention_received_count', 0)
    reaction_received = user_activity_data.get('reaction_received_count', 0)
    reaction_str = f"\n{e('reaction')} Reactions nh·∫≠n: {reaction_received:,}" if config.ENABLE_REACTION_SCAN else ""

    interaction_lines = [
        f"{e('reply')} Tr·∫£ l·ªùi ƒë√£ g·ª≠i: {reply_count:,}",
        f"{e('mention')} Mentions ƒë√£ g·ª≠i: {mention_given:,}",
        f"{e('mention')} Mentions nh·∫≠n: {mention_received:,}{reaction_str}"
    ]
    embed.add_field(name="üí¨ T∆∞∆°ng T√°c", value="\n".join(interaction_lines).strip(), inline=False)

    # --- Field 3: Th·ªùi gian ho·∫°t ƒë·ªông ---
    first_seen = user_activity_data.get('first_seen')
    last_seen = user_activity_data.get('last_seen')
    activity_span_secs = user_activity_data.get('activity_span_seconds', 0)
    activity_span_str = utils.format_timedelta(datetime.timedelta(seconds=activity_span_secs)) if activity_span_secs > 0 else "N/A"

    time_lines = [
        f"{e('calendar')} Hƒê ƒë·∫ßu ti√™n: {utils.format_discord_time(first_seen, 'R') if first_seen else 'N/A'}",
        f"{e('calendar')} Hƒê cu·ªëi c√πng: {utils.format_discord_time(last_seen, 'R') if last_seen else 'N/A'}",
        f"{e('clock')} Kho·∫£ng TG ho·∫°t ƒë·ªông: **{activity_span_str}**"
    ]
    embed.add_field(name="‚è≥ Th·ªùi Gian Ho·∫°t ƒê·ªông", value="\n".join(time_lines), inline=False)

    # --- Field 4: Ph·∫°m vi ho·∫°t ƒë·ªông ---
    distinct_channels_count = scan_data.get('user_distinct_channel_counts', {}).get(user_id, 0)
    most_active_data = scan_data.get('user_most_active_channel', {}).get(user_id) # L·∫•y d·ªØ li·ªáu ƒë√£ t√≠nh

    scope_lines = [
        f"üó∫Ô∏è S·ªë k√™nh/lu·ªìng kh√°c nhau ƒë√£ nh·∫Øn: **{distinct_channels_count}**"
    ]

    if most_active_data:
        location_id, msg_count_in_loc = most_active_data
        guild = member.guild # L·∫•y guild t·ª´ member object
        channel_obj = guild.get_channel_or_thread(location_id) # T√¨m k√™nh/lu·ªìng
        channel_mention = channel_obj.mention if channel_obj else f"`ID:{location_id}`"
        channel_name_str = f" (`#{utils.escape_markdown(channel_obj.name)}`)" if channel_obj else " (Kh√¥ng r√µ/ƒê√£ x√≥a)"
        scope_lines.append(f"üìç K√™nh ho·∫°t ƒë·ªông nhi·ªÅu nh·∫•t: {channel_mention}{channel_name_str} ({msg_count_in_loc:,} tin)")
    else:
        scope_lines.append("üìç K√™nh ho·∫°t ƒë·ªông nhi·ªÅu nh·∫•t: N/A")

    embed.add_field(name="üéØ Ph·∫°m Vi Ho·∫°t ƒê·ªông", value="\n".join(scope_lines), inline=False)


    scan_end_time = scan_data.get("scan_end_time", datetime.datetime.now(datetime.timezone.utc))
    embed.set_footer(text=f"D·ªØ li·ªáu qu√©t t·ª´ {utils.format_discord_time(scan_end_time)}")
    return embed


async def create_achievements_embed(
    member: discord.Member,
    scan_data: Dict[str, Any], # Ch·ªâ c·∫ßn scan_data ƒë·ªÉ l·∫•y tracked roles
    bot: commands.Bot,
    ranking_data: Dict[str, Dict[int, int]] # D√πng ranking_data ƒë√£ t√≠nh
) -> Optional[discord.Embed]:
    """T·∫°o Embed hi·ªÉn th·ªã th√†nh t√≠ch v√† so s√°nh v·ªã tr√≠ c·ªßa user."""
    e = lambda name: utils.get_emoji(name, bot)
    user_id = member.id
    has_achievements = False # C·ªù ƒë·ªÉ ki·ªÉm tra xem c√≥ th√†nh t√≠ch n√†o kh√¥ng

    embed = discord.Embed(
        title=f"{e('award')} Th√†nh T√≠ch & V·ªã Tr√≠ C·ªßa B·∫°n",
        description="*So s√°nh ho·∫°t ƒë·ªông c·ªßa b·∫°n v·ªõi to√†n server. Ch·ªâ hi·ªÉn th·ªã n·∫øu b·∫°n l·ªçt v√†o top.*",
        color=member.color if member.color.value != 0 else discord.Color.gold()
    )

    def add_rank_line(lines_list: list, display_name: str, rank_key: str):
        nonlocal has_achievements
        rank = ranking_data.get(rank_key, {}).get(user_id)
        if rank:
            lines_list.append(f"- {display_name}: **H·∫°ng #{rank}**")
            has_achievements = True # ƒê√°nh d·∫•u c√≥ √≠t nh·∫•t 1 th√†nh t√≠ch

    # === Field 1: BXH Ho·∫°t ƒê·ªông & T∆∞∆°ng T√°c ===
    activity_ranks: List[str] = []
    add_rank_line(activity_ranks, "G·ª≠i Tin Nh·∫Øn", "messages")
    add_rank_line(activity_ranks, "Nh·∫≠n Reaction", "reaction_received")
    add_rank_line(activity_ranks, "Tr·∫£ L·ªùi Tin Nh·∫Øn", "replies")
    add_rank_line(activity_ranks, "ƒê∆∞·ª£c Nh·∫Øc T√™n", "mention_received")
    add_rank_line(activity_ranks, "Hay Nh·∫Øc T√™n", "mention_given")
    add_rank_line(activity_ranks, '"Ng∆∞·ªùi ƒêa NƒÉng" (Nhi·ªÅu k√™nh)', "distinct_channels")
    if activity_ranks:
        embed.add_field(name=f"{e('stats')} BXH Ho·∫°t ƒê·ªông & T∆∞∆°ng T√°c", value="\n".join(activity_ranks), inline=False)

    # === Field 2: BXH S√°ng T·∫°o N·ªôi Dung ===
    content_ranks: List[str] = []
    add_rank_line(content_ranks, "D√πng Custom Emoji (Content)", "custom_emoji_content")
    add_rank_line(content_ranks, "G·ª≠i Sticker", "stickers_sent")
    add_rank_line(content_ranks, "G·ª≠i Link", "links_sent")
    add_rank_line(content_ranks, "G·ª≠i ·∫¢nh", "images_sent")
    add_rank_line(content_ranks, "T·∫°o Thread", "threads_created")
    if content_ranks:
        embed.add_field(name=f"{e('image')} BXH S√°ng T·∫°o N·ªôi Dung", value="\n".join(content_ranks), inline=False)

    # === Field 3: Danh Hi·ªáu ƒê·∫∑c Bi·ªát ===
    # L·∫•y d·ªØ li·ªáu grant t·ª´ scan_data
    tracked_role_grants: Counter = scan_data.get("tracked_role_grant_counts", Counter()) # { (uid, rid): count }
    special_role_lines: List[str] = []
    guild = member.guild

    # L·∫∑p qua c√°c role c·∫ßn theo d√µi trong config
    for tracked_role_id in config.TRACKED_ROLE_GRANT_IDS:
        # L·∫•y s·ªë l·∫ßn user n√†y nh·∫≠n ƒë∆∞·ª£c role ƒë√≥
        grant_count = tracked_role_grants.get((user_id, tracked_role_id), 0)
        if grant_count > 0:
            role = guild.get_role(tracked_role_id)
            role_name = role.name if role else f"ID: {tracked_role_id}"
            rank_key = f"tracked_role_{tracked_role_id}"
            rank = ranking_data.get(rank_key, {}).get(user_id)
            rank_str = f"(H·∫°ng #{rank})" if rank else ""
            special_role_lines.append(f'- ƒê√£ nh·∫≠n "{utils.escape_markdown(role_name)}": **{grant_count}** l·∫ßn {rank_str}'.strip())
            has_achievements = True

    if special_role_lines:
        embed.add_field(name=f"{e('crown')} Danh Hi·ªáu ƒê·∫∑c Bi·ªát", value="\n".join(special_role_lines), inline=False)

    # === Field 4: BXH Th·ªùi Gian & Tham Gia ===
    time_ranks: List[str] = []
    add_rank_line(time_ranks, "Th√†nh vi√™n L√¢u NƒÉm", "oldest_members")
    add_rank_line(time_ranks, "Ho·∫°t ƒê·ªông L√¢u Nh·∫•t (Span)", "activity_span")
    if member.premium_since: # Ch·ªâ hi·ªÉn th·ªã n·∫øu ƒëang boost
        add_rank_line(time_ranks, "Booster B·ªÅn B·ªâ", "booster_duration")
    if time_ranks:
        embed.add_field(name=f"{e('calendar')} BXH Th·ªùi Gian & Tham Gia", value="\n".join(time_ranks), inline=False)

    # === X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ th√†nh t√≠ch ===
    if not has_achievements:
        embed.description = "*B·∫°n ch∆∞a c√≥ th√†nh t√≠ch n√†o n·ªïi b·∫≠t l·ªçt v√†o top trong l·∫ßn qu√©t n√†y. H√£y ti·∫øp t·ª•c ho·∫°t ƒë·ªông nh√©!*"
        embed.clear_fields() # X√≥a c√°c field tr·ªëng
        return embed # V·∫´n tr·∫£ v·ªÅ embed th√¥ng b√°o

    return embed

# --- END OF FILE reporting/embeds_dm.py ---